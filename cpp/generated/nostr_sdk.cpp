// This file was autogenerated by some hot garbage in the
// `uniffi-bindgen-react-native` crate. Trust me, you don't want to mess with
// it!
#include "nostr_sdk.hpp"

#include "UniffiJsiTypes.h"
#include <iostream>
#include <map>
#include <stdexcept>
#include <thread>
#include <utility>

namespace react = facebook::react;
namespace jsi = facebook::jsi;

// Calling into Rust.
extern "C" {
typedef void (*UniffiRustFutureContinuationCallback)(uint64_t data,
                                                     int8_t poll_result);
typedef void (*UniffiForeignFutureFree)(uint64_t handle);
typedef void (*UniffiCallbackInterfaceFree)(uint64_t handle);
typedef struct UniffiForeignFuture {
  uint64_t handle;
  UniffiForeignFutureFree free;
} UniffiForeignFuture;
typedef struct UniffiForeignFutureStructU8 {
  uint8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU8;
typedef void (*UniffiForeignFutureCompleteU8)(
    uint64_t callback_data, UniffiForeignFutureStructU8 result);
typedef struct UniffiForeignFutureStructI8 {
  int8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI8;
typedef void (*UniffiForeignFutureCompleteI8)(
    uint64_t callback_data, UniffiForeignFutureStructI8 result);
typedef struct UniffiForeignFutureStructU16 {
  uint16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU16;
typedef void (*UniffiForeignFutureCompleteU16)(
    uint64_t callback_data, UniffiForeignFutureStructU16 result);
typedef struct UniffiForeignFutureStructI16 {
  int16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI16;
typedef void (*UniffiForeignFutureCompleteI16)(
    uint64_t callback_data, UniffiForeignFutureStructI16 result);
typedef struct UniffiForeignFutureStructU32 {
  uint32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU32;
typedef void (*UniffiForeignFutureCompleteU32)(
    uint64_t callback_data, UniffiForeignFutureStructU32 result);
typedef struct UniffiForeignFutureStructI32 {
  int32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI32;
typedef void (*UniffiForeignFutureCompleteI32)(
    uint64_t callback_data, UniffiForeignFutureStructI32 result);
typedef struct UniffiForeignFutureStructU64 {
  uint64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU64;
typedef void (*UniffiForeignFutureCompleteU64)(
    uint64_t callback_data, UniffiForeignFutureStructU64 result);
typedef struct UniffiForeignFutureStructI64 {
  int64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI64;
typedef void (*UniffiForeignFutureCompleteI64)(
    uint64_t callback_data, UniffiForeignFutureStructI64 result);
typedef struct UniffiForeignFutureStructF32 {
  float return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF32;
typedef void (*UniffiForeignFutureCompleteF32)(
    uint64_t callback_data, UniffiForeignFutureStructF32 result);
typedef struct UniffiForeignFutureStructF64 {
  double return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF64;
typedef void (*UniffiForeignFutureCompleteF64)(
    uint64_t callback_data, UniffiForeignFutureStructF64 result);
typedef struct UniffiForeignFutureStructPointer {
  void *return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructPointer;
typedef void (*UniffiForeignFutureCompletePointer)(
    uint64_t callback_data, UniffiForeignFutureStructPointer result);
typedef struct UniffiForeignFutureStructRustBuffer {
  RustBuffer return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructRustBuffer;
typedef void (*UniffiForeignFutureCompleteRustBuffer)(
    uint64_t callback_data, UniffiForeignFutureStructRustBuffer result);
typedef struct UniffiForeignFutureStructVoid {
  RustCallStatus call_status;
} UniffiForeignFutureStructVoid;
typedef void (*UniffiForeignFutureCompleteVoid)(
    uint64_t callback_data, UniffiForeignFutureStructVoid result);
typedef void (*UniffiCallbackInterfaceAdmitPolicyMethod0)(
    uint64_t uniffi_handle, RustBuffer relay_url, RustBuffer subscription_id,
    void *event, UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod0)(
    uint64_t uniffi_handle, RustBuffer *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod1)(
    uint64_t uniffi_handle,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod2)(
    uint64_t uniffi_handle, void *unsigned_event,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod3)(
    uint64_t uniffi_handle, void *public_key, RustBuffer content,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod4)(
    uint64_t uniffi_handle, void *public_key, RustBuffer encrypted_content,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod5)(
    uint64_t uniffi_handle, void *public_key, RustBuffer content,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomNostrSignerMethod6)(
    uint64_t uniffi_handle, void *public_key, RustBuffer payload,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceCustomWebSocketTransportMethod0)(
    uint64_t uniffi_handle, int8_t *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceCustomWebSocketTransportMethod1)(
    uint64_t uniffi_handle, RustBuffer url, RustBuffer mode, RustBuffer timeout,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceHandleNotificationMethod0)(
    uint64_t uniffi_handle, RustBuffer relay_url, void *msg,
    UniffiForeignFutureCompleteVoid uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceHandleNotificationMethod1)(
    uint64_t uniffi_handle, RustBuffer relay_url, RustBuffer subscription_id,
    void *event, UniffiForeignFutureCompleteVoid uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceWebSocketAdapterMethod0)(
    uint64_t uniffi_handle, RustBuffer msg,
    UniffiForeignFutureCompleteVoid uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceWebSocketAdapterMethod1)(
    uint64_t uniffi_handle,
    UniffiForeignFutureCompleteRustBuffer uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef void (*UniffiCallbackInterfaceWebSocketAdapterMethod2)(
    uint64_t uniffi_handle,
    UniffiForeignFutureCompleteVoid uniffi_future_callback,
    uint64_t uniffi_callback_data, UniffiForeignFuture *uniffi_out_return);
typedef struct UniffiVTableCallbackInterfaceAdmitPolicy {
  UniffiCallbackInterfaceAdmitPolicyMethod0 admit_event;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceAdmitPolicy;
typedef struct UniffiVTableCallbackInterfaceCustomNostrSigner {
  UniffiCallbackInterfaceCustomNostrSignerMethod0 backend;
  UniffiCallbackInterfaceCustomNostrSignerMethod1 get_public_key;
  UniffiCallbackInterfaceCustomNostrSignerMethod2 sign_event;
  UniffiCallbackInterfaceCustomNostrSignerMethod3 nip04_encrypt;
  UniffiCallbackInterfaceCustomNostrSignerMethod4 nip04_decrypt;
  UniffiCallbackInterfaceCustomNostrSignerMethod5 nip44_encrypt;
  UniffiCallbackInterfaceCustomNostrSignerMethod6 nip44_decrypt;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceCustomNostrSigner;
typedef struct UniffiVTableCallbackInterfaceCustomWebSocketTransport {
  UniffiCallbackInterfaceCustomWebSocketTransportMethod0 support_ping;
  UniffiCallbackInterfaceCustomWebSocketTransportMethod1 connect;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceCustomWebSocketTransport;
typedef struct UniffiVTableCallbackInterfaceHandleNotification {
  UniffiCallbackInterfaceHandleNotificationMethod0 handle_msg;
  UniffiCallbackInterfaceHandleNotificationMethod1 handle;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceHandleNotification;
typedef struct UniffiVTableCallbackInterfaceWebSocketAdapter {
  UniffiCallbackInterfaceWebSocketAdapterMethod0 send;
  UniffiCallbackInterfaceWebSocketAdapterMethod1 recv;
  UniffiCallbackInterfaceWebSocketAdapterMethod2 close_connection;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceWebSocketAdapter;
void *uniffi_nostr_sdk_ffi_fn_clone_admitpolicy(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_admitpolicy(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy(
    UniffiVTableCallbackInterfaceAdmitPolicy *vtable);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event(
    void *ptr, RustBuffer relay_url, RustBuffer subscription_id, void *event);
void *uniffi_nostr_sdk_ffi_fn_clone_client(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_client(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_client_new(RustBuffer signer,
                                               RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay(void *ptr,
                                                          RustBuffer url);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay(void *ptr, RustBuffer url);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_add_relay(void *ptr, RustBuffer url);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts(
    void *ptr, RustBuffer url, void *opts);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay(void *ptr,
                                                      RustBuffer url);
void uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication(
    void *ptr, int8_t enable, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_connect(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(void *ptr, RustBuffer url);
void *
uniffi_nostr_sdk_ffi_fn_method_client_database(void *ptr,
                                               RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_disconnect(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(void *ptr,
                                                       RustBuffer url);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_fetch_combined_events(
    void *ptr, void *filter, RustBuffer timeout);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_fetch_events(void *ptr, void *filter,
                                                   RustBuffer timeout);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from(
    void *ptr, RustBuffer urls, void *filter, RustBuffer timeout);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata(
    void *ptr, void *public_key, RustBuffer timeout);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_force_remove_all_relays(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay(void *ptr,
                                                         RustBuffer url);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap(
    void *ptr, void *receiver, void *rumor, RustBuffer extra_tags);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to(void *ptr, RustBuffer urls,
                                                   void *receiver, void *rumor,
                                                   RustBuffer extra_tags);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(void *ptr,
                                                           void *handler);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_relay(void *ptr,
                                                                RustBuffer url);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_relays(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(void *ptr, RustBuffer url);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_send_event(void *ptr, void *event);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder(void *ptr,
                                                         void *builder);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to(
    void *ptr, RustBuffer urls, void *builder);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(void *ptr, RustBuffer urls,
                                                    void *event);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(void *ptr, RustBuffer urls,
                                                  void *msg);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg(
    void *ptr, void *receiver, RustBuffer message, RustBuffer rumor_extra_tags);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to(
    void *ptr, RustBuffer urls, void *receiver, RustBuffer message,
    RustBuffer rumor_extra_tags);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(void *ptr, void *metadata);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_shutdown(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder(void *ptr,
                                                         void *builder);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_signer(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_subscribe(void *ptr, void *filter,
                                                RustBuffer opts);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to(
    void *ptr, RustBuffer urls, void *filter, RustBuffer opts);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id(
    void *ptr, RustBuffer id, void *filter, RustBuffer opts);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to(
    void *ptr, RustBuffer urls, RustBuffer id, void *filter, RustBuffer opts);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_subscription(void *ptr, RustBuffer id);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_subscriptions(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_sync(void *ptr, void *filter, void *opts);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_try_connect(void *ptr,
                                                  RustBuffer timeout);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(void *ptr,
                                                  RustBuffer subscription_id);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap(void *ptr,
                                                       void *gift_wrap);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection(void *ptr,
                                                          RustBuffer timeout);
void *
uniffi_nostr_sdk_ffi_fn_clone_clientbuilder(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_clientbuilder(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy(
    void *ptr, void *policy, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database(
    void *ptr, void *database, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts(
    void *ptr, void *opts, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer(
    void *ptr, void *signer, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_clientbuilder_websocket_transport(
    void *ptr, void *transport, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_clientmessage(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_clientmessage(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth(
    void *event, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close(
    RustBuffer subscription_id, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count(
    RustBuffer subscription_id, void *filter, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event(
    void *event, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_enum(
    RustBuffer e, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req(
    RustBuffer subscription_id, void *filter, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_connection(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_connection(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_connection_new(
    RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_connection_addr(void *ptr, RustBuffer addr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_connection_mode(void *ptr, RustBuffer mode,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_connection_target(
    void *ptr, RustBuffer target, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_coordinate(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_coordinate(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new(
    void *kind, void *public_key, RustBuffer identifier,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse(
    RustBuffer coordinate, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_coordinate_kind(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_coordinate_verify(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_customnostrsigner(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrsigner(
    UniffiVTableCallbackInterfaceCustomNostrSigner *vtable);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_get_public_key(void *ptr);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_sign_event(
    void *ptr, void *unsigned_event);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_encrypt(
    void *ptr, void *public_key, RustBuffer content);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_decrypt(
    void *ptr, void *public_key, RustBuffer encrypted_content);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_encrypt(
    void *ptr, void *public_key, RustBuffer content);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_decrypt(
    void *ptr, void *public_key, RustBuffer payload);
void *uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customwebsockettransport(
    UniffiVTableCallbackInterfaceCustomWebSocketTransport *vtable);
int8_t uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_support_ping(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_connect(
    void *ptr, RustBuffer url, RustBuffer mode, RustBuffer timeout);
void *uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_from_bech32(
    RustBuffer bech32, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_new(
    void *secret_key, RustBuffer password, uint8_t log_n,
    RustBuffer key_security, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt(
    void *ptr, RustBuffer password, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_key_security(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_event(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_event(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_event_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_event_as_json(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_event_author(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_event_content(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_event_created_at(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_event_id(void *ptr,
                                              RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_event_is_expired(void *ptr,
                                                RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_event_is_protected(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_event_kind(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_event_signature(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_event_tags(void *ptr,
                                                RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_event_verify(void *ptr,
                                            RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_event_verify_id(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_event_verify_signature(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_eventbuilder(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_eventbuilder(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_articles_curation_set(
    RustBuffer identifier, RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth(
    RustBuffer challenge, RustBuffer relay_url, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_award_badge(
    void *badge_definition, RustBuffer awarded_public_keys,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_blocked_relays(
    RustBuffer relay, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks(
    RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks_set(
    RustBuffer identifier, RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel(
    void *metadata, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_metadata(
    void *channel_id, void *metadata, RustBuffer relay_url,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_msg(
    void *channel_id, RustBuffer relay_url, RustBuffer content,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment(
    RustBuffer content, void *comment_to, RustBuffer root, RustBuffer relay_url,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_communities(
    RustBuffer communities, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_contact_list(
    RustBuffer contacts, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_define_badge(
    RustBuffer badge_id, RustBuffer name, RustBuffer description,
    RustBuffer image, RustBuffer image_dimensions, RustBuffer thumbnails,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete(
    RustBuffer request, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emoji_set(
    RustBuffer identifier, RustBuffer emojis, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis(
    RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_file_metadata(
    RustBuffer description, void *metadata, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_follow_set(
    RustBuffer identifier, RustBuffer public_keys,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_issue(
    RustBuffer issue, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_patch(
    RustBuffer patch, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_repository_announcement(
    RustBuffer data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_hide_channel_msg(
    void *message_id, RustBuffer reason, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_http_auth(
    RustBuffer data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interest_set(
    RustBuffer identifier, RustBuffer hashtags, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interests(
    RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_feedback(
    void *data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_request(
    void *kind, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_result(
    void *job_request, RustBuffer payload, uint64_t millisats,
    RustBuffer bolt11, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label(
    RustBuffer label_namespace, RustBuffer labels,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event(
    RustBuffer live_event, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event_msg(
    RustBuffer live_event_id, void *live_event_host, RustBuffer content,
    RustBuffer relay_url, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_long_form_text_note(
    RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata(
    void *metadata, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_channel_user(
    void *public_key, RustBuffer reason, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_list(
    RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new(
    void *kind, RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_nostr_connect(
    void *sender_keys, void *receiver_pubkey, RustBuffer msg,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_pinned_notes(
    RustBuffer ids, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_private_msg_rumor(
    void *receiver, RustBuffer message, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_product_data(
    RustBuffer data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_profile_badges(
    RustBuffer badge_definitions, RustBuffer badge_awards, void *pubkey_awarded,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_chats(
    RustBuffer chat, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_zap_request(
    void *data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction(
    void *event, RustBuffer reaction, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction_extended(
    void *event_id, void *public_key, RustBuffer reaction, RustBuffer kind,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_list(
    RustBuffer map, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_set(
    RustBuffer identifier, RustBuffer relays, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report(
    RustBuffer tags, RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost(
    void *event, RustBuffer relay_url, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal(
    void *signer, void *receiver_public_key, void *rumor);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_search_relays(
    RustBuffer relay, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_stall_data(
    void *data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note(
    RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note_reply(
    RustBuffer content, void *reply_to, RustBuffer root, RustBuffer relay_url,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_videos_curation_set(
    RustBuffer identifier, RustBuffer video, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_zap_receipt(
    RustBuffer bolt11, RustBuffer preimage, void *zap_request,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_allow_self_tagging(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build(
    void *ptr, void *public_key, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_custom_created_at(
    void *ptr, void *created_at, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow(void *ptr, uint8_t difficulty,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign(void *ptr, void *signer);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign_with_keys(
    void *ptr, void *keys, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags(
    void *ptr, RustBuffer tags, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_eventid(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_eventid(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes(
    RustBuffer bytes, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventid_new(
    void *public_key, void *created_at, void *kind, void *tags,
    RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse(
    RustBuffer id, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_events(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_events(void *ptr,
                                         RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_events_contains(void *ptr, void *event,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_events_first(void *ptr,
                                            RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_events_is_empty(void *ptr,
                                               RustCallStatus *uniffi_out_err);
uint64_t
uniffi_nostr_sdk_ffi_fn_method_events_len(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_events_merge(void *ptr, void *other,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_events_to_vec(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_filemetadata(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_filemetadata(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new(
    RustBuffer url, RustBuffer mime_type, RustBuffer hash,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm(
    void *ptr, RustBuffer key, RustBuffer iv, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash(
    void *ptr, RustBuffer blurhash, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions(
    void *ptr, RustBuffer dim, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet(
    void *ptr, RustBuffer magnet, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filemetadata_size(
    void *ptr, uint64_t size, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_filter(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_filter(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record(
    RustBuffer record, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_filter_new(RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_filter_as_json(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_filter_as_record(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_author(void *ptr, void *author,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_authors(void *ptr, RustBuffer authors,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_coordinate(
    void *ptr, void *coordinate, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_coordinates(
    void *ptr, RustBuffer coordinates, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag(
    void *ptr, void *tag, RustBuffer content, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags(
    void *ptr, void *tag, RustBuffer contents, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_event(void *ptr, void *event_id,
                                            RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_events(void *ptr, RustBuffer ids,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_hashtag(void *ptr, RustBuffer hashtag,
                                              RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_hashtags(void *ptr, RustBuffer hashtags,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_id(void *ptr, void *id,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_identifier(
    void *ptr, RustBuffer identifier, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_identifiers(
    void *ptr, RustBuffer identifiers, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_ids(void *ptr, RustBuffer ids,
                                                RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_filter_is_empty(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_kind(void *ptr, void *kind,
                                           RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_kinds(void *ptr, RustBuffer kinds,
                                            RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_limit(void *ptr, uint64_t limit,
                                            RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_filter_match_event(
    void *ptr, void *event, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_pubkey(void *ptr, void *pubkey,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys(void *ptr, RustBuffer pubkeys,
                                              RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_reference(void *ptr, RustBuffer reference,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_references(
    void *ptr, RustBuffer references, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors(
    void *ptr, RustBuffer authors, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates(
    void *ptr, RustBuffer coordinates, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags(
    void *ptr, void *tag, RustBuffer contents, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_events(
    void *ptr, RustBuffer ids, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags(
    void *ptr, RustBuffer hashtags, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers(
    void *ptr, RustBuffer identifiers, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids(
    void *ptr, RustBuffer ids, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds(
    void *ptr, RustBuffer kinds, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys(
    void *ptr, RustBuffer pubkeys, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_references(
    void *ptr, RustBuffer references, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_search(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_since(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_filter_remove_until(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_search(void *ptr, RustBuffer text,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_since(void *ptr, void *timestamp,
                                            RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_filter_until(void *ptr, void *timestamp,
                                            RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_handlenotification(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_handlenotification(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(
    UniffiVTableCallbackInterfaceHandleNotification *vtable);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg(
    void *ptr, RustBuffer relay_url, void *msg);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle(
    void *ptr, RustBuffer relay_url, RustBuffer subscription_id, void *event);
void *
uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new(
    void *job_request, RustBuffer status, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount(
    void *ptr, uint64_t millisats, RustBuffer bolt11,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info(
    void *ptr, RustBuffer info, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload(
    void *ptr, RustBuffer payload, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_keys(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_keys(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic(
    RustBuffer mnemonic, RustBuffer passphrase, RustBuffer account,
    RustBuffer typ, RustBuffer index, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_keys_generate(
    RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_keys_new(void *secret_key,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_keys_parse(RustBuffer secret_key,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_keys_public_key(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_keys_secret_key(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr(
    void *ptr, RustBuffer message, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_kind(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_kind(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std(
    RustBuffer e, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_kind_new(uint16_t kind,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_kind_as_std(void *ptr,
                                           RustCallStatus *uniffi_out_err);
uint16_t
uniffi_nostr_sdk_ffi_fn_method_kind_as_u16(void *ptr,
                                           RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_kind_is_regular(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_metadata(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_metadata(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record(
    RustBuffer r, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_metadata_new(
    RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_metadata_as_json(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_as_record(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_about(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field(
    void *ptr, RustBuffer key, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_name(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_get_website(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_about(
    void *ptr, RustBuffer about, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner(
    void *ptr, RustBuffer banner, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field(
    void *ptr, RustBuffer key, RustBuffer value,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name(
    void *ptr, RustBuffer display_name, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06(
    void *ptr, RustBuffer lud06, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16(
    void *ptr, RustBuffer lud16, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_name(
    void *ptr, RustBuffer name, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05(
    void *ptr, RustBuffer nip05, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture(
    void *ptr, RustBuffer picture, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_metadata_set_website(
    void *ptr, RustBuffer website, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_nwc(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nwc(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_nwc_new(void *uri,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts(
    void *uri, void *opts, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance(void *ptr);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nwc_get_info(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions(void *ptr,
                                                     RustBuffer params);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice(void *ptr, RustBuffer params);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice(void *ptr, RustBuffer params);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice(void *ptr, RustBuffer params);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend(void *ptr, RustBuffer params);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nwc_status(void *ptr);
void *
uniffi_nostr_sdk_ffi_fn_clone_nip05profile(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip05profile(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_nip19(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip19(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32(
    RustBuffer bech32, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip19coordinate(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_bech32(
    RustBuffer bech32, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_nostr_uri(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new(
    void *coordinate, RustBuffer relays, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_nip19event(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip19event(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_bech32(
    RustBuffer bech32, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event(
    void *event, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_nostr_uri(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new(
    void *event_id, RustBuffer author, RustBuffer kind, RustBuffer relays,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19event_author(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_nip19event_kind(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19event_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_nip19profile(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip19profile(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_bech32(
    RustBuffer bech32, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_nostr_uri(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new(
    void *public_key, RustBuffer relays, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_nip21(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nip21(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse(RustBuffer uri,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_nostrconnect(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrconnect(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new(
    void *uri, void *app_keys, RustBuffer timeout, RustBuffer opts,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrconnect_get_public_key(void *ptr);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt(
    void *ptr, void *public_key, RustBuffer encrypted_content);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt(
    void *ptr, void *public_key, RustBuffer content);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt(
    void *ptr, void *public_key, RustBuffer payload);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt(
    void *ptr, void *public_key, RustBuffer content);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event(void *ptr,
                                                       void *unsigned_event);
void *uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectmetadata_new(
    RustBuffer name, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_as_json(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_description(
    void *ptr, RustBuffer description, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons(
    void *ptr, RustBuffer icons, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url(
    void *ptr, RustBuffer url, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb(
    RustBuffer path, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(void *ptr, void *filter);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete(void *ptr, void *filter);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(void *ptr,
                                                         void *event_id);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata(void *ptr,
                                                      void *public_key);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(void *ptr, void *filter);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(void *ptr, void *event);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(void *ptr);
void *uniffi_nostr_sdk_ffi_fn_clone_nostrsigner(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrsigner(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom(
    void *custom, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys(
    void *keys, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nostr_connect(
    void *connect, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key(void *ptr);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt(
    void *ptr, void *public_key, RustBuffer encrypted_content);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt(
    void *ptr, void *public_key, RustBuffer content);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt(
    void *ptr, void *public_key, RustBuffer payload);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt(
    void *ptr, void *public_key, RustBuffer content);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event(void *ptr,
                                                      void *unsigned_event);
void *uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode(
    void *ptr, RustBuffer mode, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout(
    void *ptr, RustBuffer timeout, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_new(
    void *public_key, RustBuffer relays, void *random_secret_key,
    RustBuffer lud16, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_parse(
    RustBuffer uri, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_lud16(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_public_key(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_relays(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_secret(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_options(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_options(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_options_new(RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_options_autoconnect(
    void *ptr, int8_t val, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication(
    void *ptr, int8_t enabled, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_options_connection(
    void *ptr, void *connection, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_options_gossip(void *ptr, int8_t enabled,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency(
    void *ptr, RustBuffer max, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_options_relay_limits(
    void *ptr, void *limits, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_publickey(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_publickey(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes(
    RustBuffer bytes, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse(
    RustBuffer public_key, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_relay(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relay(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg(
    void *ptr, RustBuffer msgs, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_method_relay_connect(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_count_events(void *ptr, void *filter,
                                                  RustBuffer timeout);
void uniffi_nostr_sdk_ffi_fn_method_relay_disconnect(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_relay_document(void *ptr);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events(
    void *ptr, void *filter, RustBuffer timeout, RustBuffer policy);
int8_t uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relay_opts(void *ptr,
                                                RustCallStatus *uniffi_out_err);
uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_queue(void *ptr,
                                           RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_send_event(void *ptr, void *event);
void uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(
    void *ptr, void *msg, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_relay_stats(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relay_status(void *ptr,
                                            RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(void *ptr,
                                                                   void *filter,
                                                                   void *opts);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id(
    void *ptr, RustBuffer id, void *filter, void *opts);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_subscription(void *ptr, RustBuffer id);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_sync(void *ptr, void *filter, void *opts);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items(
    void *ptr, void *filter, RustBuffer items, void *opts);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_try_connect(void *ptr, RustBuffer timeout);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(void *ptr, RustBuffer id);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all(void *ptr);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relay_url(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(
    void *ptr, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts(
    void *ptr, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received(
    void *ptr, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(
    void *ptr, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success(
    void *ptr, RustCallStatus *uniffi_out_err);
double uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success_rate(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relayinformationdocument_new(
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_contact(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_description(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_fees(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_icon(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_language_tags(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_limitation(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_name(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_payments_url(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_posting_policy(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_pubkey(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_relay_countries(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_retention(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_software(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_supported_nips(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_tags(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_version(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t
uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_relaylimits(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relaylimits(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags(
    void *ptr, RustBuffer max_num_tags, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind(
    void *ptr, void *kind, RustBuffer max_num_tags,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size(
    void *ptr, RustBuffer max_size, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind(
    void *ptr, void *kind, RustBuffer max_size, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size(
    void *ptr, RustBuffer max_size, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_relaymessage(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relaymessage(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth(
    RustBuffer challenge, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed(
    RustBuffer subscription_id, RustBuffer message,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count(
    RustBuffer subscription_id, double count, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose(
    RustBuffer subscription_id, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event(
    RustBuffer subscription_id, void *event, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_enum(
    RustBuffer e, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice(
    RustBuffer message, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok(
    void *event_id, int8_t status, RustBuffer message,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_relayoptions(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_relayoptions(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_interval(
    void *ptr, int8_t adjust_retry_interval, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode(
    void *ptr, RustBuffer mode, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits(
    void *ptr, void *limits, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency(
    void *ptr, RustBuffer max, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping(
    void *ptr, int8_t ping, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_read(
    void *ptr, int8_t read, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect(
    void *ptr, int8_t reconnect, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_interval(
    void *ptr, RustBuffer interval, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_relayoptions_write(
    void *ptr, int8_t write, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_request(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_request(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_request_new(
    RustBuffer method, RustBuffer params, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_request_parse(
    RustBuffer json, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_request_method(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_request_params(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_response(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_response(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_secretkey(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_secretkey(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes(
    RustBuffer bytes, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse(
    RustBuffer secret_key, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt(
    void *ptr, RustBuffer password, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_serverconfig(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_serverconfig(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_shippingmethod(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_shippingmethod(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new(
    RustBuffer id, double cost, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_shippingmethod_get_shipping_cost(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name(
    void *ptr, RustBuffer name, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions(
    void *ptr, RustBuffer regions, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_singlelettertag(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_singlelettertag(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_lowercase(
    RustBuffer character, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_uppercase(
    RustBuffer character, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_lowercase(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_uppercase(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_stalldata(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_stalldata(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record(
    RustBuffer r, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new(
    RustBuffer id, RustBuffer name, RustBuffer description, RustBuffer currency,
    RustBuffer shipping, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_stalldata_currency(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_stalldata_description(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_stalldata_id(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_stalldata_name(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_exit_policy(
    void *ptr, RustBuffer policy, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_idle_timeout(
    void *ptr, RustBuffer timeout, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout(
    void *ptr, RustBuffer timeout, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_subscribeoptions(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on(
    void *ptr, void *opts, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_syncoptions(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_syncoptions(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction(
    void *ptr, RustBuffer direction, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_syncoptions_initial_timeout(
    void *ptr, RustBuffer timeout, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_tag(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_tag(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_alt(RustBuffer summary,
                                            RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_client(RustBuffer name,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate(
    void *coordinate, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_custom(
    RustBuffer kind, RustBuffer values, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_description(
    RustBuffer description, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_event(void *event_id,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report(
    void *event_id, RustBuffer report, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration(
    void *timestamp, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized(
    RustBuffer standardized, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag(RustBuffer hashtag,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier(
    RustBuffer identifier, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_image(
    RustBuffer url, RustBuffer dimensions, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_parse(RustBuffer data,
                                              RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_pow(uint64_t nonce, uint8_t difficulty,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_protected(
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key(
    void *public_key, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report(
    void *public_key, RustBuffer report, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_reference(
    RustBuffer reference, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata(
    RustBuffer relay_url, RustBuffer metadata, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tag_title(RustBuffer title,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tag_as_vec(void *ptr,
                                          RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tag_content(void *ptr,
                                           RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_tag_is_protected(void *ptr,
                                                RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_tag_is_reply(void *ptr,
                                            RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_tag_is_root(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tag_kind(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tag_kind_str(void *ptr,
                                            RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_tag_len(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_tags(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_tags(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list(
    RustBuffer list, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text(
    RustBuffer text, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_constructor_tags_parse(RustBuffer tags,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_coordinates(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_event_ids(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_expiration(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_filter(void *ptr, RustBuffer kind,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized(
    void *ptr, RustBuffer kind, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_find(void *ptr, RustBuffer kind,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized(
    void *ptr, RustBuffer kind, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_first(void *ptr,
                                          RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_get(void *ptr, uint64_t index,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_hashtags(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_identifier(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t
uniffi_nostr_sdk_ffi_fn_method_tags_is_empty(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_last(void *ptr,
                                         RustCallStatus *uniffi_out_err);
uint64_t
uniffi_nostr_sdk_ffi_fn_method_tags_len(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_public_keys(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_tags_to_vec(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_clone_timestamp(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_timestamp(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs(
    uint64_t secs, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now(
    RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_timestamp_to_human_datetime(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_unsignedevent(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_unsignedevent(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_unsignedevent_from_json(
    RustBuffer json, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_add_signature(
    void *ptr, RustBuffer sig, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_pretty_json(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind(
    void *ptr, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign(void *ptr, void *signer);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign_with_keys(
    void *ptr, void *keys, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_unwrappedgift(void *ptr,
                                                RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_constructor_unwrappedgift_from_gift_wrap(
    void *signer, void *gift_wrap);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none(void *ptr);
void *uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_websocketadapter(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_websocketadapter(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_init_callback_vtable_websocketadapter(
    UniffiVTableCallbackInterfaceWebSocketAdapter *vtable);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send(void *ptr, RustBuffer msg);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv(void *ptr);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_method_websocketadapter_close_connection(void *ptr);
void *uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_websocketadapterwrapper_new(
    void *adapter, RustCallStatus *uniffi_out_err);
void *
uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_free_zaprequestdata(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new(
    void *public_key, RustBuffer relays, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount(
    void *ptr, uint64_t amount, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id(
    void *ptr, void *event_id, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl(
    void *ptr, RustBuffer lnurl, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message(
    void *ptr, RustBuffer message, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_debug(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_eq(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_ne(
    void *ptr, void *other, RustCallStatus *uniffi_out_err);
uint64_t uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_hash(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag(
    void *delegator_keys, void *delegatee_pubkey, RustBuffer conditions,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_func_decrypt_received_private_zap_message(
    void *secret_key, void *private_zap, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_func_decrypt_sent_private_zap_message(
    void *secret_key, void *public_key, void *private_zap,
    RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_extract_relay_list(void *event,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_generate_shared_key(
    void *secret_key, void *public_key, RustCallStatus *uniffi_out_err);
uint8_t uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits(
    RustBuffer bytes, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile(RustBuffer nip05,
                                               RustBuffer proxy);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config(RustBuffer server_url,
                                                     RustBuffer proxy);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty(
    uint8_t leading_zero_bits, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_func_gift_wrap(void *signer, void *receiver_pubkey,
                                       void *rumor, RustBuffer extra_tags);
void *uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal(
    void *receiver, void *seal, RustBuffer extra_tags,
    RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_git_hash_version(RustCallStatus *uniffi_out_err);
void uniffi_nostr_sdk_ffi_fn_func_init_logger(RustBuffer level,
                                              RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_func_make_private_msg(void *signer, void *receiver,
                                              RustBuffer message,
                                              RustBuffer rumor_extra_tags);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt(void *secret_key, void *public_key,
                                           RustBuffer encrypted_content,
                                           RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt(void *secret_key, void *public_key,
                                           RustBuffer content,
                                           RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t
uniffi_nostr_sdk_ffi_fn_func_nip11_get_information_document(RustBuffer url,
                                                            RustBuffer proxy);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text(
    RustBuffer text, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt(void *secret_key, void *public_key,
                                           RustBuffer payload,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt(
    void *secret_key, void *public_key, RustBuffer content, RustBuffer version,
    RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request(
    void *data, RustCallStatus *uniffi_out_err);
void *uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request(
    void *data, void *keys, RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_func_nip96_upload(
    void *signer, void *config, RustBuffer file_data, RustBuffer mime_type,
    RustBuffer proxy);
RustBuffer uniffi_nostr_sdk_ffi_fn_func_sign_delegation(
    void *delegator_keys, void *delegatee_pk, RustBuffer conditions,
    RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string(RustBuffer kind,
                                                RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag(
    RustBuffer delegation_tag, void *delegatee_pubkey, void *event_kind,
    uint64_t created_at, RustCallStatus *uniffi_out_err);
int8_t uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature(
    void *delegator_public_key, void *delegatee_public_key,
    RustBuffer conditions, RustBuffer signature,
    RustCallStatus *uniffi_out_err);
/*handle*/ uint64_t uniffi_nostr_sdk_ffi_fn_func_verify_nip05(void *public_key,
                                                              RustBuffer nip05,
                                                              RustBuffer proxy);
RustBuffer ffi_nostr_sdk_ffi_rustbuffer_alloc(uint64_t size,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
ffi_nostr_sdk_ffi_rustbuffer_from_bytes(ForeignBytes bytes,
                                        RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rustbuffer_free(RustBuffer buf,
                                       RustCallStatus *uniffi_out_err);
RustBuffer ffi_nostr_sdk_ffi_rustbuffer_reserve(RustBuffer buf,
                                                uint64_t additional,
                                                RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_u8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_u8(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_u8(
    /*handle*/ uint64_t handle);
uint8_t ffi_nostr_sdk_ffi_rust_future_complete_u8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_i8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_i8(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_i8(
    /*handle*/ uint64_t handle);
int8_t ffi_nostr_sdk_ffi_rust_future_complete_i8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_u16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_u16(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_u16(
    /*handle*/ uint64_t handle);
uint16_t ffi_nostr_sdk_ffi_rust_future_complete_u16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_i16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_i16(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_i16(
    /*handle*/ uint64_t handle);
int16_t ffi_nostr_sdk_ffi_rust_future_complete_i16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_u32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_u32(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_u32(
    /*handle*/ uint64_t handle);
uint32_t ffi_nostr_sdk_ffi_rust_future_complete_u32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_i32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_i32(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_i32(
    /*handle*/ uint64_t handle);
int32_t ffi_nostr_sdk_ffi_rust_future_complete_i32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_u64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_u64(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_u64(
    /*handle*/ uint64_t handle);
uint64_t ffi_nostr_sdk_ffi_rust_future_complete_u64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_i64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_i64(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_i64(
    /*handle*/ uint64_t handle);
int64_t ffi_nostr_sdk_ffi_rust_future_complete_i64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_f32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_f32(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_f32(
    /*handle*/ uint64_t handle);
float ffi_nostr_sdk_ffi_rust_future_complete_f32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_f64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_f64(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_f64(
    /*handle*/ uint64_t handle);
double ffi_nostr_sdk_ffi_rust_future_complete_f64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_pointer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_pointer(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_pointer(
    /*handle*/ uint64_t handle);
void *ffi_nostr_sdk_ffi_rust_future_complete_pointer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_rust_buffer(
    /*handle*/ uint64_t handle);
RustBuffer ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_nostr_sdk_ffi_rust_future_poll_void(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_nostr_sdk_ffi_rust_future_cancel_void(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_free_void(
    /*handle*/ uint64_t handle);
void ffi_nostr_sdk_ffi_rust_future_complete_void(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
uint16_t uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag();
uint16_t
uniffi_nostr_sdk_ffi_checksum_func_decrypt_received_private_zap_message();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_decrypt_sent_private_zap_message();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_get_nip96_server_config();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_get_prefixes_for_difficulty();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_gift_wrap();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_git_hash_version();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_init_logger();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_make_private_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip11_get_information_document();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip21_extract_from_text();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip57_anonymous_zap_request();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip57_private_zap_request();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_nip96_upload();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_sign_delegation();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_validate_delegation_tag();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_verify_delegation_signature();
uint16_t uniffi_nostr_sdk_ffi_checksum_func_verify_nip05();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_admitpolicy_admit_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_add_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_database();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_disconnect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_fetch_combined_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events_from();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_all_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_remove_all_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_shutdown();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_signer();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscribe();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscription();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_sync();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_try_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_client_wait_for_connection();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_admit_policy();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_websocket_transport();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_connection_addr();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_connection_mode();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_connection_target();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_coordinate_identifier();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_coordinate_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_backend();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_get_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_sign_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_decrypt();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_support_ping();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_key_security();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_version();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_author();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_content();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_created_at();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_is_expired();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_is_protected();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_signature();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_verify();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_verify_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_event_verify_signature();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_allow_self_tagging();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_custom_created_at();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_dedup_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign_with_keys();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_contains();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_first();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_is_empty();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_len();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_merge();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_events_to_vec();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filemetadata_aes_256_gcm();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filemetadata_blurhash();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filemetadata_dimensions();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_as_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_author();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_authors();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_identifier();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_ids();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_kinds();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_limit();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_match_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_reference();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_references();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_authors();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_coordinates();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_custom_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_hashtags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_identifiers();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_pubkeys();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_references();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_search();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_since();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_filter_until();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_amount();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_extra_info();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_payload();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_keys_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_as_std();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_as_pretty_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_custom_field();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_display_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_custom_field();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_display_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nwc_status();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip05profile_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_coordinate();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_author();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19profile_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_bunker_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_get_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_sign_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_as_json();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_description();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_icons();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_url();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_get_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_lud16();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_secret();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_options_connection();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_options_gossip();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_publickey_to_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_count_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_document();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_opts();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_queue();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_send_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_stats();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_status();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_subscription();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_sync();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_sync_with_items();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relay_url();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success_rate();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_contact();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_description();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_fees();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_icon();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_language_tags();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_limitation();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_name();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_payments_url();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_posting_policy();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_pubkey();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_relay_countries();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_retention();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_software();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_supported_nips();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_tags();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_version();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_interval();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_interval();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_request_method();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_request_params();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_get_shipping_cost();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_regions();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_lowercase();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_uppercase();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_description();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_name();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_exit_policy();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_idle_timeout();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_syncoptions_direction();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_syncoptions_initial_timeout();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_content();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_is_root();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_len();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tag_single_letter_tag();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_expiration();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_filter();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_filter_standardized();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_find();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_find_standardized();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_first();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_get();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_identifier();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_last();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_len();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_timestamp_to_human_datetime();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_add_signature();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_pretty_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_content();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_created_at();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign_with_keys();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_send();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_recv();
uint16_t
uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_close_connection();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_amount();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_event_id();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl();
uint16_t uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_message();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_client_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_auth();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_close();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_count();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_req();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_connection_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_parse();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_from_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_articles_curation_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_auth();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_award_badge();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_blocked_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_comment();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_communities();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_contact_list();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_define_badge();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_delete();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emoji_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emojis();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_file_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_follow_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_issue();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_patch();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_repository_announcement();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_hide_channel_msg();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_http_auth();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interest_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interests();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_feedback();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_request();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_result();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_label();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event_msg();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_long_form_text_note();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_metadata();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_channel_user();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_list();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_nostr_connect();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_pinned_notes();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_private_msg_rumor();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_product_data();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_profile_badges();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_chats();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_zap_request();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction_extended();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_list();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_report();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_repost();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_seal();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_search_relays();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_stall_data();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note_reply();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_videos_curation_set();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_zap_receipt();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventid_from_bytes();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_filemetadata_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_filter_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_jobfeedbackdata_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_keys_from_mnemonic();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_keys_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_kind_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19_from_bech32();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_bech32();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_bech32();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_bech32();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_nostr_uri();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnect_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectmetadata_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnecturi_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_custom();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nostr_connect();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_new();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_options_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_publickey_from_bytes();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_relayinformationdocument_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_auth();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_closed();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_count();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_eose();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_enum();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_notice();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_request_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_request_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_from_bytes();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_generate();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_shippingmethod_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_lowercase();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_uppercase();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_json();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_record();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_client();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_description();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_event();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_event_report();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_from_standardized();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_image();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key_report();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_relay_metadata();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tag_title();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_from_secs();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_unsignedevent_from_json();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_unwrappedgift_from_gift_wrap();
uint16_t
uniffi_nostr_sdk_ffi_checksum_constructor_websocketadapterwrapper_new();
uint16_t uniffi_nostr_sdk_ffi_checksum_constructor_zaprequestdata_new();
uint32_t ffi_nostr_sdk_ffi_uniffi_contract_version();
}

namespace uniffi::nostr_sdk {
template <typename T> struct Bridging;

using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <typename T> struct Bridging<ReferenceHolder<T>> {
  static jsi::Value jsNew(jsi::Runtime &rt) {
    auto holder = jsi::Object(rt);
    return holder;
  }
  static T fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
                  const jsi::Value &value) {
    auto obj = value.asObject(rt);
    if (obj.hasProperty(rt, "pointee")) {
      auto pointee = obj.getProperty(rt, "pointee");
      return uniffi::nostr_sdk::Bridging<T>::fromJs(rt, callInvoker, pointee);
    }
    throw jsi::JSError(rt,
                       "Expected ReferenceHolder to have a pointee property. "
                       "This is likely a bug in uniffi-bindgen-react-native");
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustBuffer> {
  static RustBuffer rustbuffer_alloc(int32_t size) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_nostr_sdk_ffi_rustbuffer_alloc(size, &status);
  }

  static void rustbuffer_free(RustBuffer buf) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    ffi_nostr_sdk_ffi_rustbuffer_free(buf, &status);
  }

  static RustBuffer rustbuffer_from_bytes(ForeignBytes bytes) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_nostr_sdk_ffi_rustbuffer_from_bytes(bytes, &status);
  }

  static RustBuffer fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                           const jsi::Value &value) {
    try {
      auto buffer =
          uniffi_jsi::Bridging<jsi::ArrayBuffer>::value_to_arraybuffer(rt,
                                                                       value);
      auto bytes = ForeignBytes{
          .len = static_cast<int32_t>(buffer.length(rt)),
          .data = buffer.data(rt),
      };

      // This buffer is constructed from foreign bytes. Rust scaffolding copies
      // the bytes, to make the RustBuffer.
      auto buf = rustbuffer_from_bytes(bytes);
      // Once it leaves this function, the buffer is immediately passed back
      // into Rust, where it's used to deserialize into the Rust versions of the
      // arguments. At that point, the copy is destroyed.
      return buf;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }

  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                         RustBuffer buf) {
    // We need to make a copy of the bytes from Rust's memory space into
    // Javascripts memory space. We need to do this because the two languages
    // manages memory very differently: a garbage collector needs to track all
    // the memory at runtime, Rust is doing it all closer to compile time.
    uint8_t *bytes = new uint8_t[buf.len];
    std::memcpy(bytes, buf.data, buf.len);

    // Construct an ArrayBuffer with copy of the bytes from the RustBuffer.
    auto payload = std::make_shared<uniffi_jsi::CMutableBuffer>(
        uniffi_jsi::CMutableBuffer((uint8_t *)bytes, buf.len));
    auto arrayBuffer = jsi::ArrayBuffer(rt, payload);

    // Once we have a Javascript version, we no longer need the Rust version, so
    // we can call into Rust to tell it it's okay to free that memory.
    rustbuffer_free(buf);

    // Finally, return the ArrayBuffer.
    return uniffi_jsi::Bridging<jsi::ArrayBuffer>::arraybuffer_to_value(
        rt, arrayBuffer);
    ;
  }
};

} // namespace uniffi::nostr_sdk

namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustCallStatus> {
  static jsi::Value jsSuccess(jsi::Runtime &rt) {
    auto statusObject = jsi::Object(rt);
    statusObject.setProperty(rt, "code", jsi::Value(rt, UNIFFI_CALL_STATUS_OK));
    return statusObject;
  }
  static RustCallStatus rustSuccess(jsi::Runtime &rt) {
    return {UNIFFI_CALL_STATUS_OK};
  }
  static void copyIntoJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         const RustCallStatus status,
                         const jsi::Value &jsStatus) {
    auto statusObject = jsStatus.asObject(rt);
    if (status.error_buf.data != nullptr) {
      auto rbuf = Bridging<RustBuffer>::toJs(rt, callInvoker, status.error_buf);
      statusObject.setProperty(rt, "errorBuf", rbuf);
    }
    if (status.code != UNIFFI_CALL_STATUS_OK) {
      auto code =
          uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, status.code);
      statusObject.setProperty(rt, "code", code);
    }
  }

  static RustCallStatus fromJs(jsi::Runtime &rt,
                               std::shared_ptr<CallInvoker> invoker,
                               const jsi::Value &jsStatus) {
    RustCallStatus status;
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status.error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status.code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
    return status;
  }

  static void copyFromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> invoker,
                         const jsi::Value &jsStatus, RustCallStatus *status) {
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status->error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status->code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
  }
};

} // namespace uniffi::nostr_sdk
// In other uniffi bindings, it is assumed that the foreign language holds on
// to the vtable, which the Rust just gets a pointer to.
// Here, we need to hold on to them, but also be able to clear them at just the
// right time so we can support hot-reloading.
namespace uniffi::nostr_sdk::registry {
template <typename T> class VTableHolder {
public:
  T vtable;
  VTableHolder(T v) : vtable(v) {}
};

// Mutex to bind the storage and setting of vtable together.
// We declare it here, but the lock is taken by callers of the putTable
// method who are also sending a pointer to Rust.
static std::mutex vtableMutex;

// Registry to hold all vtables so they persist even when JS objects are GC'd.
// The only reason this exists is to prevent a dangling pointer in the
// Rust machinery: i.e. we don't need to access or write to this registry
// after startup.
// Registry to hold all vtables so they persist even when JS objects are GC'd.
// Maps string identifiers to vtable holders using type erasure
static std::unordered_map<std::string, std::shared_ptr<void>> vtableRegistry;

// Add a vtable to the registry with an identifier
template <typename T>
static T *putTable(std::string_view identifier, T vtable) {
  auto holder = std::make_shared<VTableHolder<T>>(vtable);
  // Store the raw pointer to the vtable before type erasure
  T *rawPtr = &(holder->vtable);
  // Store the holder using type erasure with the string identifier
  vtableRegistry[std::string(identifier)] = std::shared_ptr<void>(holder);
  return rawPtr;
}

// Clear the registry.
//
// Conceptually, this is called after teardown of the module (i.e. after
// teardown of the jsi::Runtime). However, because Rust is dropping callbacks
// because the Runtime is being torn down, we must keep the registry intact
// until after the runtime goes away.
//
// Therefore, in practice we should call this when the next runtime is
// being stood up.
static void clearRegistry() {
  std::lock_guard<std::mutex> lock(vtableMutex);
  vtableRegistry.clear();
}
} // namespace uniffi::nostr_sdk::registry

// This calls into Rust.
// Implementation of callback function calling from Rust to JS
// RustFutureContinuationCallback

// Callback function:
// uniffi::nostr_sdk::cb::rustfuturecontinuationcallback::UniffiRustFutureContinuationCallback
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::rustfuturecontinuationcallback {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue, uint64_t rs_data,
                 int8_t rs_pollResult) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_data = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_data);
  auto js_pollResult =
      uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_pollResult);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_data, js_pollResult);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiRustFutureContinuationCallback: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_data, int8_t rs_pollResult) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_data, rs_pollResult);
}

static UniffiRustFutureContinuationCallback
makeCallbackFunction( // uniffi::nostr_sdk::cb::rustfuturecontinuationcallback
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_data,
                                               int8_t rs_pollResult) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_data,
         rs_pollResult](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_data, rs_pollResult);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::rustfuturecontinuationcallback
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureFree, passed from Rust to JS as part of async callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureFree> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureFree rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureFree"), 1,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureFree func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
  // Implementation of free callback function CallbackInterfaceFree

// Callback function:
// uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free

// Callback function:
// uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::vtablecallbackinterfaceadmitpolicy::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::
    vtablecallbackinterfaceadmitpolicy::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::vtablecallbackinterfaceadmitpolicy::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::vtablecallbackinterfaceadmitpolicy::free

// Callback function:
// uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::vtablecallbackinterfacecustomnostrsigner::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::
    vtablecallbackinterfacecustomnostrsigner::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::vtablecallbackinterfacecustomnostrsigner::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::vtablecallbackinterfacecustomnostrsigner::free

// Callback function:
// uniffi::nostr_sdk::st::vtablecallbackinterfacecustomwebsockettransport::vtablecallbackinterfacecustomwebsockettransport::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::
    vtablecallbackinterfacecustomwebsockettransport::
        vtablecallbackinterfacecustomwebsockettransport::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::vtablecallbackinterfacecustomwebsockettransport::vtablecallbackinterfacecustomwebsockettransport::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::st::vtablecallbackinterfacecustomwebsockettransport::vtablecallbackinterfacecustomwebsockettransport::free

// Callback function:
// uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::vtablecallbackinterfacehandlenotification::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::
    vtablecallbackinterfacehandlenotification::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::vtablecallbackinterfacehandlenotification::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::vtablecallbackinterfacehandlenotification::free

// Callback function:
// uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::vtablecallbackinterfacewebsocketadapter::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::
    vtablecallbackinterfacewebsocketadapter::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::vtablecallbackinterfacewebsocketadapter::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::vtablecallbackinterfacewebsocketadapter::free
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFuture> {
  static UniffiForeignFuture fromJs(jsi::Runtime &rt,
                                    std::shared_ptr<CallInvoker> callInvoker,
                                    const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFuture");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFuture rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "handle"));
    rsObject.free = uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free::
        makeCallbackFunction(rt, callInvoker, jsObject.getProperty(rt, "free"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU8> {
  static UniffiForeignFutureStructU8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU8, passed from Rust to JS as part of async callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructU8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI8> {
  static UniffiForeignFutureStructI8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI8, passed from Rust to JS as part of async callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructI8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU16> {
  static UniffiForeignFutureStructU16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructU16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI16> {
  static UniffiForeignFutureStructI16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructI16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU32> {
  static UniffiForeignFutureStructU32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructU32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI32> {
  static UniffiForeignFutureStructI32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructI32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU64> {
  static UniffiForeignFutureStructU64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructU64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI64> {
  static UniffiForeignFutureStructI64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructI64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF32> {
  static UniffiForeignFutureStructF32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<float>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructF32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF64> {
  static UniffiForeignFutureStructF64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<double>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructF64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructPointer> {
  static UniffiForeignFutureStructPointer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructPointer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructPointer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<void *>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompletePointer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompletePointer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompletePointer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompletePointer"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompletePointer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructPointer>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructRustBuffer> {
  static UniffiForeignFutureStructRustBuffer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructRustBuffer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructRustBuffer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteRustBuffer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteRustBuffer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteRustBuffer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteRustBuffer"),
        2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteRustBuffer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<
             UniffiForeignFutureStructRustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructVoid> {
  static UniffiForeignFutureStructVoid
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructVoid");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructVoid rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call_status = uniffi::nostr_sdk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteVoid, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::nostr_sdk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteVoid> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteVoid rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteVoid"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteVoid func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::nostr_sdk::Bridging<UniffiForeignFutureStructVoid>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::nostr_sdk
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceAdmitPolicyMethod0

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfaceadmitpolicymethod0::UniffiCallbackInterfaceAdmitPolicyMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfaceadmitpolicymethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, void *,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                 RustBuffer rs_subscriptionId, void *rs_event,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_relayUrl = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_relayUrl);
  auto js_subscriptionId = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_subscriptionId);
  auto js_event = uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_event);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult =
        cb.call(rt, js_uniffiHandle, js_relayUrl, js_subscriptionId, js_event,
                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceAdmitPolicyMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
         RustBuffer rs_subscriptionId, void *rs_event,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_relayUrl, rs_subscriptionId, rs_event,
           rs_uniffiFutureCallback, rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceAdmitPolicyMethod0
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfaceadmitpolicymethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                 RustBuffer rs_subscriptionId, void *rs_event,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl,
         rs_subscriptionId, rs_event, rs_uniffiFutureCallback,
         rs_uniffiCallbackData, rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl,
               rs_subscriptionId, rs_event, rs_uniffiFutureCallback,
               rs_uniffiCallbackData, rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfaceadmitpolicymethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod0

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod0::UniffiCallbackInterfaceCustomNostrSignerMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::nostr_sdk::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::nostr_sdk::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod0
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod1

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod1::UniffiCallbackInterfaceCustomNostrSignerMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, UniffiForeignFutureCompleteRustBuffer,
                          uint64_t, UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_uniffiFutureCallback,
                                js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod1: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiFutureCallback, rs_uniffiCallbackData,
           rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod1
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiFutureCallback,
         rs_uniffiCallbackData, rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod2

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod2::UniffiCallbackInterfaceCustomNostrSignerMethod2
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod2 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_unsignedEvent,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_unsignedEvent =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_unsignedEvent);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_unsignedEvent,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod2: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, void *rs_unsignedEvent,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_unsignedEvent, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod2
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod2
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_unsignedEvent,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_unsignedEvent,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_unsignedEvent, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod2
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod3

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod3::UniffiCallbackInterfaceCustomNostrSignerMethod3
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod3 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustBuffer,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_content,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_publicKey =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_publicKey);
  auto js_content = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_content);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_publicKey, js_content,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod3: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, void *rs_publicKey, RustBuffer rs_content,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_publicKey, rs_content, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod3
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod3
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_content,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey, rs_content,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey,
               rs_content, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod3
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod4

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod4::UniffiCallbackInterfaceCustomNostrSignerMethod4
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod4 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustBuffer,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_encryptedContent,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_publicKey =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_publicKey);
  auto js_encryptedContent = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_encryptedContent);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult =
        cb.call(rt, js_uniffiHandle, js_publicKey, js_encryptedContent,
                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod4: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, void *rs_publicKey,
         RustBuffer rs_encryptedContent,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_publicKey, rs_encryptedContent,
           rs_uniffiFutureCallback, rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod4
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod4
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_encryptedContent,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey,
         rs_encryptedContent, rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey,
               rs_encryptedContent, rs_uniffiFutureCallback,
               rs_uniffiCallbackData, rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod4
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod5

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod5::UniffiCallbackInterfaceCustomNostrSignerMethod5
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod5 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustBuffer,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_content,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_publicKey =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_publicKey);
  auto js_content = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_content);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_publicKey, js_content,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod5: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, void *rs_publicKey, RustBuffer rs_content,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_publicKey, rs_content, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod5
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod5
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_content,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey, rs_content,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey,
               rs_content, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod5
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomNostrSignerMethod6

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod6::UniffiCallbackInterfaceCustomNostrSignerMethod6
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod6 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, RustBuffer,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_payload,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_publicKey =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_publicKey);
  auto js_payload = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_payload);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_publicKey, js_payload,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceCustomNostrSignerMethod6: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, void *rs_publicKey, RustBuffer rs_payload,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_publicKey, rs_payload, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomNostrSignerMethod6
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod6
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_publicKey,
                 RustBuffer rs_payload,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey, rs_payload,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_publicKey,
               rs_payload, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod6
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomWebSocketTransportMethod0

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod0::UniffiCallbackInterfaceCustomWebSocketTransportMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::
    callbackinterfacecustomwebsockettransportmethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t *, RustCallStatus *)> rsLambda =
    nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, int8_t *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::nostr_sdk::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi_jsi::Bridging<ReferenceHolder<int8_t>>::fromJs(
        rt, callInvoker, uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceCustomWebSocketTransportMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, int8_t *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceCustomWebSocketTransportMethod0
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, int8_t *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceCustomWebSocketTransportMethod1

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod1::UniffiCallbackInterfaceCustomWebSocketTransportMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::
    callbackinterfacecustomwebsockettransportmethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, RustBuffer,
                          UniffiForeignFutureCompleteRustBuffer, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_url,
                 RustBuffer rs_mode, RustBuffer rs_timeout,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_url =
      uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_url);
  auto js_mode =
      uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_mode);
  auto js_timeout = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_timeout);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult =
        cb.call(rt, js_uniffiHandle, js_url, js_mode, js_timeout,
                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceCustomWebSocketTransportMethod1: "
              << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle, RustBuffer rs_url, RustBuffer rs_mode,
         RustBuffer rs_timeout,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_url, rs_mode, rs_timeout,
           rs_uniffiFutureCallback, rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceCustomWebSocketTransportMethod1
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_url,
                 RustBuffer rs_mode, RustBuffer rs_timeout,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_url, rs_mode,
         rs_timeout, rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_url, rs_mode,
               rs_timeout, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceHandleNotificationMethod0

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod0::UniffiCallbackInterfaceHandleNotificationMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, void *,
                          UniffiForeignFutureCompleteVoid, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl, void *rs_msg,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_relayUrl = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_relayUrl);
  auto js_msg = uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_msg);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteVoid>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_relayUrl, js_msg,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceHandleNotificationMethod0: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                     void *rs_msg,
                     UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                     uint64_t rs_uniffiCallbackData,
                     UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_relayUrl, rs_msg, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceHandleNotificationMethod0
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl, void *rs_msg,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl, rs_msg,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl,
               rs_msg, rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceHandleNotificationMethod1

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod1::UniffiCallbackInterfaceHandleNotificationMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, void *,
                          UniffiForeignFutureCompleteVoid, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                 RustBuffer rs_subscriptionId, void *rs_event,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_relayUrl = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_relayUrl);
  auto js_subscriptionId = uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_subscriptionId);
  auto js_event = uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_event);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteVoid>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult =
        cb.call(rt, js_uniffiHandle, js_relayUrl, js_subscriptionId, js_event,
                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceHandleNotificationMethod1: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                     RustBuffer rs_subscriptionId, void *rs_event,
                     UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                     uint64_t rs_uniffiCallbackData,
                     UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_relayUrl, rs_subscriptionId, rs_event,
           rs_uniffiFutureCallback, rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceHandleNotificationMethod1
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_relayUrl,
                 RustBuffer rs_subscriptionId, void *rs_event,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl,
         rs_subscriptionId, rs_event, rs_uniffiFutureCallback,
         rs_uniffiCallbackData, rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_relayUrl,
               rs_subscriptionId, rs_event, rs_uniffiFutureCallback,
               rs_uniffiCallbackData, rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceWebSocketAdapterMethod0

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod0::UniffiCallbackInterfaceWebSocketAdapterMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, UniffiForeignFutureCompleteVoid,
                          uint64_t, UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_msg,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_msg =
      uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_msg);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteVoid>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_msg,
                                js_uniffiFutureCallback, js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceWebSocketAdapterMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_msg,
                     UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                     uint64_t rs_uniffiCallbackData,
                     UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_msg, rs_uniffiFutureCallback,
           rs_uniffiCallbackData, rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceWebSocketAdapterMethod0
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_msg,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_msg,
         rs_uniffiFutureCallback, rs_uniffiCallbackData,
         rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_msg,
               rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceWebSocketAdapterMethod1

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod1::UniffiCallbackInterfaceWebSocketAdapterMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, UniffiForeignFutureCompleteRustBuffer,
                          uint64_t, UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteRustBuffer>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_uniffiFutureCallback,
                                js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceWebSocketAdapterMethod1: "
        << error.what() << std::endl;
    throw error;
  }
}

static void
callback(uint64_t rs_uniffiHandle,
         UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
         uint64_t rs_uniffiCallbackData,
         UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiFutureCallback, rs_uniffiCallbackData,
           rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceWebSocketAdapterMethod1
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteRustBuffer rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiFutureCallback,
         rs_uniffiCallbackData, rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod1
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceWebSocketAdapterMethod2

// Callback function:
// uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod2::UniffiCallbackInterfaceWebSocketAdapterMethod2
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod2 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, UniffiForeignFutureCompleteVoid, uint64_t,
                          UniffiForeignFuture *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_uniffiFutureCallback =
      uniffi::nostr_sdk::Bridging<UniffiForeignFutureCompleteVoid>::toJs(
          rt, callInvoker, rs_uniffiFutureCallback);
  auto js_uniffiCallbackData = uniffi_jsi::Bridging<uint64_t>::toJs(
      rt, callInvoker, rs_uniffiCallbackData);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_uniffiFutureCallback,
                                js_uniffiCallbackData);

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn = uniffi::nostr_sdk::Bridging<
        ReferenceHolder<UniffiForeignFuture>>::fromJs(rt, callInvoker,
                                                      uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceWebSocketAdapterMethod2: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle,
                     UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                     uint64_t rs_uniffiCallbackData,
                     UniffiForeignFuture *rs_uniffiOutReturn) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_uniffiFutureCallback, rs_uniffiCallbackData,
           rs_uniffiOutReturn);
}

static UniffiCallbackInterfaceWebSocketAdapterMethod2
makeCallbackFunction( // uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod2
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  if (rsLambda != nullptr) {
    // `makeCallbackFunction` is called in two circumstances:
    //
    // 1. at startup, when initializing callback interface vtables.
    // 2. when polling futures. This happens at least once per future that is
    //    exposed to Javascript. We know that this is always the same function,
    //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
    //
    // We can therefore return the callback function without making anything
    // new if we've been initialized already.
    return callback;
  }
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle,
                 UniffiForeignFutureCompleteVoid rs_uniffiFutureCallback,
                 uint64_t rs_uniffiCallbackData,
                 UniffiForeignFuture *rs_uniffiOutReturn) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_uniffiFutureCallback,
         rs_uniffiCallbackData, rs_uniffiOutReturn](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle,
               rs_uniffiFutureCallback, rs_uniffiCallbackData,
               rs_uniffiOutReturn);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeNostrSdk, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod2
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceAdmitPolicy> {
  static UniffiVTableCallbackInterfaceAdmitPolicy
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt,
          "Expected an object for UniffiVTableCallbackInterfaceAdmitPolicy");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceAdmitPolicy rsObject;

    // Create the vtable from the js callbacks.
    rsObject.admit_event = uniffi::nostr_sdk::cb::
        callbackinterfaceadmitpolicymethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "admitEvent"));
    rsObject.uniffi_free =
        uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::
            vtablecallbackinterfaceadmitpolicy::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceCustomNostrSigner> {
  static UniffiVTableCallbackInterfaceCustomNostrSigner
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceCustomNostrSigner");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceCustomNostrSigner rsObject;

    // Create the vtable from the js callbacks.
    rsObject.backend = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "backend"));
    rsObject.get_public_key = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "getPublicKey"));
    rsObject.sign_event = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod2::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "signEvent"));
    rsObject.nip04_encrypt = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod3::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "nip04Encrypt"));
    rsObject.nip04_decrypt = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod4::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "nip04Decrypt"));
    rsObject.nip44_encrypt = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod5::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "nip44Encrypt"));
    rsObject.nip44_decrypt = uniffi::nostr_sdk::cb::
        callbackinterfacecustomnostrsignermethod6::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "nip44Decrypt"));
    rsObject.uniffi_free =
        uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::
            vtablecallbackinterfacecustomnostrsigner::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceCustomWebSocketTransport> {
  static UniffiVTableCallbackInterfaceCustomWebSocketTransport
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for "
              "UniffiVTableCallbackInterfaceCustomWebSocketTransport");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceCustomWebSocketTransport rsObject;

    // Create the vtable from the js callbacks.
    rsObject.support_ping = uniffi::nostr_sdk::cb::
        callbackinterfacecustomwebsockettransportmethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "supportPing"));
    rsObject.connect = uniffi::nostr_sdk::cb::
        callbackinterfacecustomwebsockettransportmethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "connect"));
    rsObject.uniffi_free =
        uniffi::nostr_sdk::st::vtablecallbackinterfacecustomwebsockettransport::
            vtablecallbackinterfacecustomwebsockettransport::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceHandleNotification> {
  static UniffiVTableCallbackInterfaceHandleNotification
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceHandleNotification");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceHandleNotification rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle_msg = uniffi::nostr_sdk::cb::
        callbackinterfacehandlenotificationmethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "handleMsg"));
    rsObject.handle = uniffi::nostr_sdk::cb::
        callbackinterfacehandlenotificationmethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "handle"));
    rsObject.uniffi_free =
        uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::
            vtablecallbackinterfacehandlenotification::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk
namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceWebSocketAdapter> {
  static UniffiVTableCallbackInterfaceWebSocketAdapter
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceWebSocketAdapter");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceWebSocketAdapter rsObject;

    // Create the vtable from the js callbacks.
    rsObject.send = uniffi::nostr_sdk::cb::
        callbackinterfacewebsocketadaptermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "send"));
    rsObject.recv = uniffi::nostr_sdk::cb::
        callbackinterfacewebsocketadaptermethod1::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "recv"));
    rsObject.close_connection = uniffi::nostr_sdk::cb::
        callbackinterfacewebsocketadaptermethod2::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "closeConnection"));
    rsObject.uniffi_free =
        uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::
            vtablecallbackinterfacewebsocketadapter::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::nostr_sdk

namespace uniffi::nostr_sdk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiRustFutureContinuationCallback> {
  static UniffiRustFutureContinuationCallback
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &value) {
    try {
      return uniffi::nostr_sdk::cb::rustfuturecontinuationcallback::
          makeCallbackFunction(rt, callInvoker, value);
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }
};

} // namespace uniffi::nostr_sdk

NativeNostrSdk::NativeNostrSdk(
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> invoker)
    : callInvoker(invoker), props() {
  // Map from Javascript names to the cpp names
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_admitpolicy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_admitpolicy"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_admitpolicy(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_admitpolicy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_admitpolicy"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_admitpolicy(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_client(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_client(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_client_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_client_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_client_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_relay(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_automatic_authentication"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_connect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_connect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_connect_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_connect_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_database"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_database"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_database(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_disconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_disconnect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_disconnect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_combined_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_fetch_combined_events"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_combined_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_all_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_force_remove_all_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_all_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_handle_notifications"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_relay(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_remove_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_remove_relay"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_send_event_builder_to"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_event_to"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_set_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_set_metadata"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_shutdown"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_shutdown"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_shutdown(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_signer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_signer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_signer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "client_subscribe_with_id_to"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscription"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscription"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscription(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscriptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_subscriptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscriptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_sync"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_sync(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_try_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_try_connect"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_try_connect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_clientbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_clientbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_clientbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_clientbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_clientbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_clientbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_websocket_"
        "transport"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "clientbuilder_websocket_transport"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_websocket_transport(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_clientmessage"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_clientmessage"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_clientmessage(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_clientmessage"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_clientmessage"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_clientmessage(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_clientmessage_from_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_clientmessage_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "clientmessage_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "clientmessage_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "clientmessage_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_connection"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_connection"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_connection(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_connection"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_connection"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_connection(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_connection_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_connection_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_connection_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_addr"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_addr"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_addr(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_mode"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_mode(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_target"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_target"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_target(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "connection_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "connection_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "connection_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "connection_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_verify"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_verify"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_verify(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "coordinate_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "coordinate_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "coordinate_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "coordinate_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "coordinate_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_customnostrsigner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_customnostrsigner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_customnostrsigner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_get_public_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "customnostrsigner_get_public_key"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_get_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_sign_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "customnostrsigner_sign_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_sign_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "customnostrsigner_nip04_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "customnostrsigner_nip04_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "customnostrsigner_nip44_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "customnostrsigner_nip44_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_support_"
        "ping"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "customwebsockettransport_support_ping"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_support_ping(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_"
        "connect"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "customwebsockettransport_connect"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_connect(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_from_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "encryptedsecretkey_from_bech32"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_encryptedsecretkey_new"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_key_security"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "encryptedsecretkey_key_security"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_key_security(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "encryptedsecretkey_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "encryptedsecretkey_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_"
        "eq_eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "encryptedsecretkey_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_"
        "eq_ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "encryptedsecretkey_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "encryptedsecretkey_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_event(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_event(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_event_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_event_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_event_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_as_json(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_author"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_author(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_content"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_content(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_created_at"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_created_at"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_created_at(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_is_expired"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_is_expired"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_is_expired(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_is_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_is_protected"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_is_protected(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_signature"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_signature(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_tags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_verify_signature"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_eventbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_eventbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_eventbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_eventbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_eventbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_eventbuilder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_articles_"
        "curation_set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_articles_curation_set"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_articles_curation_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_award_badge"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_award_badge"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_award_badge(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_blocked_"
        "relays"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_blocked_relays"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_blocked_relays(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_bookmarks"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_bookmarks_set"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_"
        "metadata"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_channel_metadata"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_metadata(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_channel_msg"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_communities"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_communities"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_communities(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_contact_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_contact_list"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_contact_list(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_define_badge"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_define_badge"),
          6,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_define_badge(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emoji_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_emoji_set"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emoji_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_file_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_file_metadata"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_file_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_follow_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_follow_set"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_follow_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_issue"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_git_issue"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_issue(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_patch"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_git_patch"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_patch(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_repository_"
        "announcement"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_git_repository_announcement"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_repository_announcement(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_hide_channel_"
        "msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_hide_channel_msg"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_hide_channel_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_http_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_http_auth"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_http_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interest_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_interest_set"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interest_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interests"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_interests"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interests(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_feedback"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_job_feedback"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_feedback(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_job_request"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_result"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_job_result"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_result(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_live_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event_"
        "msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_live_event_msg"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_long_form_text_"
        "note"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_long_form_text_note"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_long_form_text_note(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_channel_"
        "user"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_mute_channel_user"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_channel_user(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_mute_list"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_list(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_nostr_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_nostr_connect"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_nostr_connect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_pinned_notes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_pinned_notes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_pinned_notes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_private_msg_"
        "rumor"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_private_msg_rumor"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_private_msg_rumor(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_product_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_product_data"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_product_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_profile_"
        "badges"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_profile_badges"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_profile_badges(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_chats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_public_chats"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_chats(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_zap_"
        "request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_public_zap_request"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_zap_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction_"
        "extended"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_reaction_extended"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction_extended(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_relay_list"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_list(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_set"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_relay_set"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_set(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_search_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_search_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_search_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_stall_data"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_stall_data"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_stall_data(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_text_note"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note_"
        "reply"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_text_note_reply"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note_reply(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_videos_curation_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "eventbuilder_videos_curation_set"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_videos_curation_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_zap_receipt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_eventbuilder_zap_receipt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_zap_receipt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_allow_self_tagging"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_allow_self_tagging"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_allow_self_tagging(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_custom_created_at"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_custom_created_at"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_custom_created_at(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign_with_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_sign_with_keys"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign_with_keys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "eventbuilder_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_eventid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_eventid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_eventid(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_eventid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_eventid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_eventid(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_new"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_events"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_events(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_events"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_events(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_contains"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_contains"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_contains(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_first"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_first"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_first(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_is_empty"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_is_empty(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_len"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_merge"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_merge"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_merge(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_events_to_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_events_to_vec"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_events_to_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_filemetadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_filemetadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_filemetadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_filemetadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_filemetadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_filemetadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_size"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_size"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_size(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "filemetadata_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "filemetadata_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "filemetadata_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "filemetadata_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_filter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_filter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_filter(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_filter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_filter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_filter(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_filter_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_as_json(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_as_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_as_record(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_author"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_author(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_authors"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_authors"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_authors(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_coordinate"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_coordinates"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_coordinates(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_events"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_events(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_hashtag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_hashtag"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_hashtag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_hashtags"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_hashtags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_id"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_identifier"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_identifier(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_identifiers"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_identifiers"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_identifiers(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_ids"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_ids(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_is_empty"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_is_empty(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_kind"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_kinds"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_kinds"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_kinds(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_limit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_limit"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_limit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_match_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_match_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_match_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_pubkey"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_reference"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_reference"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_reference(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_references"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_references"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_references(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_events"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_references"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_references"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_references(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_search"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_search(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_since"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_since"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_since(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_until"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_remove_until"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_until(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_search"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_search(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_since"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_since"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_since(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_until"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_until"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_until(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_handlenotification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_handlenotification"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_handlenotification(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_handlenotification"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_handlenotification"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_handlenotification(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "handlenotification_handle_msg"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_keys"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_keys(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_keys"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_keys(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_generate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_generate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_keys_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_public_key(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_secret_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_secret_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_secret_key(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_kind(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_kind(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_kind_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_kind_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_kind_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_as_std"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_as_std"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_as_std(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_as_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_as_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_as_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_regular"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_regular"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_regular(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_metadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_metadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_metadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_metadata(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_metadata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_json(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_as_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_record(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_about"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_about"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_about(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_website"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_get_website"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_website(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_about"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_about"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_about(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_website"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_set_website"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_website(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "metadata_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "metadata_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "metadata_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nwc"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nwc"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nwc(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nwc"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_nwc"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nwc(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nwc_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nwc_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nwc_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_get_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_get_info"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_get_info(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_status"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nwc_status"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_status(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip05profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip05profile"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip05profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip05profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip05profile"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip05profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip19(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip19coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nip19coordinate_from_bech32"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_nostr_"
        "uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nip19coordinate_from_nostr_uri"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19coordinate_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nip19coordinate_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nip19coordinate_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nip19coordinate_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nip19coordinate_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip19event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_nip19event_from_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nip19event_from_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_author"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_author(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19event_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19event_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19event_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19event_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip19profile"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip19profile"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip19profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_nip19profile_from_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_nostr_"
        "uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nip19profile_from_nostr_uri"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19profile_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19profile_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19profile_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nip19profile_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip21"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nip21"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nip21(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nip21"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_nip21"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nip21(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_get_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nostrconnect_get_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_get_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectmetadata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_nostrconnectmetadata_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectmetadata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nostrconnectmetadata_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnectmetadata_description"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnectmetadata_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_"
        "eq_eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnectmetadata_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_"
        "eq_ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnectmetadata_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnectmetadata_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnecturi_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_"
        "display"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnecturi_uniffi_trait_display"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_display(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnecturi_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnecturi_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrconnecturi_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrdatabase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrdatabase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrsigner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrsigner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrsigner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrsigner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrsigner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrsigner(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nostr_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nostrsigner_nostr_connect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nostr_connect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nostrwalletconnectoptions_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_"
        "connection_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                "nostrwalletconnectoptions_connection_mode"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrwalletconnectoptions_timeout"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nostrwalletconnecturi_new"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_"
        "parse"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "nostrwalletconnecturi_parse"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_parse(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_lud16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nostrwalletconnecturi_lud16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_lud16(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_public_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrwalletconnecturi_public_key"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nostrwalletconnecturi_relays"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_secret"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "nostrwalletconnecturi_secret"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_secret(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_"
        "trait_debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrwalletconnecturi_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_"
        "trait_eq_eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrwalletconnecturi_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_"
        "trait_eq_ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "nostrwalletconnecturi_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_options"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_options"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_options(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_options"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_options"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_options(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_options_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_options_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_options_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_autoconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_options_autoconnect"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_options_autoconnect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_automatic_"
        "authentication"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "options_automatic_authentication"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_connection"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_options_connection"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_options_connection(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_gossip"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_options_gossip"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_options_gossip(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_options_relay_limits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_options_relay_limits"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_options_relay_limits(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_publickey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_publickey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_publickey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_publickey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_publickey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_publickey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "publickey_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "publickey_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "publickey_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "publickey_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relay"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_relay(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_relay"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_relay(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_connect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_connect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_count_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_count_events"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_count_events(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_disconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_disconnect"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_disconnect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_document"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_document"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_document(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_is_connected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_is_connected"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_opts"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_opts(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_queue"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_queue"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_queue(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_send_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_send_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_send_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_send_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_send_msg"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_stats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_stats"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_stats(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_status"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_status"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_status(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscription"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscription"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscription(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_sync"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_sync(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_try_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_try_connect"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_try_connect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relay_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relay_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayconnectionstats_attempts"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_"
        "received"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayconnectionstats_bytes_received"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayconnectionstats_bytes_sent"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_"
        "at"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayconnectionstats_connected_at"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_"
        "connection_timestamp"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_"
              "connection_timestamp"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayconnectionstats_latency"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayconnectionstats_success"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success_"
        "rate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayconnectionstats_success_rate"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success_rate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relayinformationdocument_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "relayinformationdocument_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relayinformationdocument_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "contact"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_contact"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_contact(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_description"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_fees"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayinformationdocument_fees"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_fees(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_icon"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayinformationdocument_icon"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_icon(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_language_"
        "tags"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_language_tags"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_language_tags(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "limitation"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_limitation"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_limitation(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayinformationdocument_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_payments_"
        "url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_payments_url"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_payments_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_posting_"
        "policy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_posting_policy"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_posting_policy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayinformationdocument_pubkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_relay_"
        "countries"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_relay_countries"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_relay_countries(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "retention"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_retention"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_retention(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "software"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_software"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_software(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "supported_nips"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_supported_nips"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_supported_nips(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayinformationdocument_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_"
        "version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayinformationdocument_version"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_"
        "trait_debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                "relayinformationdocument_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_"
        "trait_eq_eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                "relayinformationdocument_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_"
        "trait_eq_ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                "relayinformationdocument_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_"
        "trait_hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                "relayinformationdocument_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relaylimits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relaylimits"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_relaylimits(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relaylimits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_relaylimits"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_relaylimits(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaylimits_event_max_num_tags"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_"
        "per_kind"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relaylimits_event_max_num_tags_per_kind"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_"
        "kind"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relaylimits_event_max_size_per_kind"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaylimits_message_max_size"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaylimits_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaylimits_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaylimits_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relaymessage"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relaymessage"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_relaymessage(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relaymessage"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_relaymessage"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_relaymessage(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_relaymessage_from_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_relaymessage_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaymessage_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaymessage_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaymessage_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relaymessage_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_relayoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_relayoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_relayoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_relayoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_relayoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_"
        "interval"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "relayoptions_adjust_retry_interval"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_interval(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayoptions_connection_mode"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayoptions_max_avg_latency"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_read"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_read(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_interval"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "relayoptions_retry_interval"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_interval(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_write"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_relayoptions_write"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_write(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_request"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_request(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_request"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_request(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_request_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_request_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_request_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_request_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_request_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_request_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_method"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_method"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_request_method(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_params"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_params"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_request_params(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_response"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_response(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_response"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_response(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "response_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "response_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "response_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_secretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_secretkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_secretkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_secretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_secretkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_secretkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "secretkey_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "secretkey_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "secretkey_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_serverconfig"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_serverconfig"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_serverconfig(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_serverconfig"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_serverconfig"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_serverconfig(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_shippingmethod"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_shippingmethod"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_shippingmethod(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_shippingmethod"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_shippingmethod"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_shippingmethod(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_get_shipping_"
        "cost"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "shippingmethod_get_shipping_cost"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_get_shipping_cost(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_singlelettertag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_singlelettertag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_singlelettertag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_singlelettertag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_singlelettertag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_singlelettertag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_lowercase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "singlelettertag_lowercase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_lowercase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_uppercase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "singlelettertag_uppercase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_uppercase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_lowercase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "singlelettertag_is_lowercase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_lowercase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_uppercase"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "singlelettertag_is_uppercase"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_uppercase(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "singlelettertag_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "singlelettertag_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "singlelettertag_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "singlelettertag_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_stalldata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_stalldata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_stalldata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_stalldata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_stalldata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_stalldata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_currency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_currency"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_currency(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_description"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_description"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_description(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_name"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_name(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "subscribeautocloseoptions_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_exit_"
        "policy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "subscribeautocloseoptions_exit_policy"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_exit_policy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_idle_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "subscribeautocloseoptions_idle_timeout"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_idle_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "subscribeautocloseoptions_timeout"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_subscribeoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_subscribeoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_subscribeoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_syncoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_syncoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_syncoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_syncoptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_syncoptions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_syncoptions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_syncoptions_initial_timeout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "syncoptions_initial_timeout"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_initial_timeout(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_tag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_tag(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_tag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_tag(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_alt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_alt"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_alt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_client(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_custom"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_custom"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_custom(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_description"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_description"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_description(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_event"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_image"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_image"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_image(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_pow"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_pow"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_pow(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_protected"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_protected(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_reference"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_reference"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_reference(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_title"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tag_title"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_title(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_as_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_as_vec"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_as_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_content"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_content(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_protected"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_protected(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_reply"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_reply"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_reply(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_root"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_is_root"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_root(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_kind_str"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_kind_str"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_kind_str(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_len"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_clone_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_tags(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_nostr_sdk_ffi_fn_free_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_tags(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_tags_parse"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_parse(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_coordinates"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_coordinates(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_event_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_event_ids"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_event_ids(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_expiration"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_expiration"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_expiration(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_filter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_filter"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_filter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_find"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_find"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_find(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_first"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_first"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_first(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_get"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_get"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_get(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_hashtags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_hashtags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_identifier"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_identifier(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_is_empty"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_is_empty(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_last"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_last"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_last(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_len"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_public_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_public_keys"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_public_keys(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_to_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_tags_to_vec"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_tags_to_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_timestamp"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_timestamp(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_timestamp"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_timestamp(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_to_human_datetime"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "timestamp_to_human_datetime"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_to_human_datetime(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_debug"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "timestamp_uniffi_trait_debug"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_debug(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_eq"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "timestamp_uniffi_trait_eq_eq"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_eq(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_ne"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "timestamp_uniffi_trait_eq_ne"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_ne(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "timestamp_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_unsignedevent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_unsignedevent"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_unsignedevent(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_unsignedevent"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_unsignedevent"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_unsignedevent(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_unsignedevent_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_"
                                        "constructor_unsignedevent_from_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_unsignedevent_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_add_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "unsignedevent_add_signature"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_add_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_pretty_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "unsignedevent_as_pretty_json"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_pretty_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign_with_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "unsignedevent_sign_with_keys"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign_with_keys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unsignedevent_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unsignedevent_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unsignedevent_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "unsignedevent_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_unwrappedgift"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_unwrappedgift"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_unwrappedgift(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_unwrappedgift_from_gift_"
        "wrap"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "unwrappedgift_from_gift_wrap"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_unwrappedgift_from_gift_wrap(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unwrappedgift_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unwrappedgift_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "unwrappedgift_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_hash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                        "unwrappedgift_uniffi_trait_hash"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_hash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_websocketadapter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_websocketadapter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_websocketadapter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_websocketadapter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_websocketadapter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_websocketadapter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_close_"
        "connection"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "websocketadapter_close_connection"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_close_connection(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_websocketadapterwrapper_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_"
                                    "websocketadapterwrapper_new"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_websocketadapterwrapper_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_free_zaprequestdata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_free_zaprequestdata"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_free_zaprequestdata(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_"
        "debug"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "zaprequestdata_uniffi_trait_debug"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_debug(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_"
        "eq"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "zaprequestdata_uniffi_trait_eq_eq"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_eq(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_"
        "ne"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "zaprequestdata_uniffi_trait_eq_ne"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_ne(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_"
        "hash"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_method_"
                                    "zaprequestdata_uniffi_trait_hash"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_hash(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_decrypt_received_private_zap_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_decrypt_"
                                    "received_private_zap_message"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_func_decrypt_received_private_zap_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_decrypt_sent_private_zap_message"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_"
                                        "decrypt_sent_private_zap_message"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_decrypt_sent_private_zap_message(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_extract_relay_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_extract_relay_list"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_extract_relay_list(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_generate_shared_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_generate_shared_key"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_generate_shared_key(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_gift_wrap"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_gift_wrap(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_git_hash_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_git_hash_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_git_hash_version(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_init_logger"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_init_logger"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_init_logger(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_make_private_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_make_private_msg"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_make_private_msg(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip11_get_information_document"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_"
                                        "nip11_get_information_document"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_nip11_get_information_document(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_nip96_upload"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_nip96_upload"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_nip96_upload(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_sign_delegation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_sign_delegation"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_sign_delegation(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_func_verify_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_fn_func_verify_nip05"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_fn_func_verify_nip05(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u8"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_u8(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_u8(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_u8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i8"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_i8(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_i8(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i8"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i8"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_i8(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u16"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i16"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i16"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_i16(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_u32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_i32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_u64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_u64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_u64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_i64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_i64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_i64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_f32"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_f32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_f32"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_f32(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_f64"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_f64"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_f64"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_f64(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_pointer"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_poll_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_poll_void"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_poll_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_cancel_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_cancel_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_free_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_free_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_free_void(
                rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_rust_future_complete_void"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_rust_future_complete_void"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_rust_future_complete_void(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_decrypt_received_private_zap_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_"
                                    "decrypt_received_private_zap_message"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_func_decrypt_received_private_zap_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_decrypt_sent_private_zap_"
        "message"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_"
                                    "decrypt_sent_private_zap_message"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_func_decrypt_sent_private_zap_message(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_nip96_server_config"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_get_nip96_server_config"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_get_nip96_server_config(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_get_prefixes_for_difficulty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_get_prefixes_for_difficulty"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_get_prefixes_for_difficulty(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_git_hash_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_git_hash_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_git_hash_version(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_init_logger"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_init_logger"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_init_logger(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_make_private_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_make_private_msg"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_make_private_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip11_get_information_"
        "document"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_"
                                    "nip11_get_information_document"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip11_get_information_document(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip21_extract_from_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_nip21_extract_from_text"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip21_extract_from_text(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip57_anonymous_zap_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_nip57_anonymous_zap_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip57_anonymous_zap_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip57_private_zap_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_nip57_private_zap_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip57_private_zap_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip96_upload"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_nip96_upload"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_nip96_upload(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_sign_delegation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_sign_delegation"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_sign_delegation(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_validate_delegation_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_validate_delegation_tag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_validate_delegation_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_verify_delegation_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "func_verify_delegation_signature"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_func_verify_delegation_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_func_verify_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_func_verify_nip05"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_func_verify_nip05(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_admitpolicy_admit_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_admitpolicy_admit_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_admitpolicy_admit_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_"
        "relay"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_add_discovery_relay"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_add_read_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_"
        "opts"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_add_relay_with_opts"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_add_write_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_automatic_"
        "authentication"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_automatic_authentication"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_connect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_connect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_database"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_database"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_database(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_disconnect_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_combined_"
        "events"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_fetch_combined_events"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_combined_events(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events_from"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_fetch_events_from"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events_from(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_fetch_metadata"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_all_"
        "relays"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_force_remove_all_relays"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_all_relays(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_force_remove_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_handle_"
        "notifications"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_handle_notifications"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_relay(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_relays(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_remove_all_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_remove_all_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_remove_all_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_send_event_builder"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_"
        "to"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_send_event_builder_to"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_send_private_msg"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_"
        "to"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_send_private_msg_to"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_shutdown"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_shutdown"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_shutdown(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_sign_event_builder"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_signer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_signer"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_signer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_subscribe_with_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_"
        "to"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_subscribe_with_id_to"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscription"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscription"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscription(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_sync"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_sync(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_try_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_try_connect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_try_connect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_unsubscribe_all"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_client_unwrap_gift_wrap"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_client_wait_for_"
        "connection"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "client_wait_for_connection"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_client_wait_for_connection(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_admit_"
        "policy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "clientbuilder_admit_policy"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_admit_policy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_clientbuilder_database"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_websocket_"
        "transport"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "clientbuilder_websocket_transport"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_websocket_transport(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_clientmessage_as_enum"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_clientmessage_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_addr"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_addr"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_addr(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_mode"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_target"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_connection_target"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_target(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_coordinate_identifier"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_identifier(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_coordinate_public_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_backend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_customnostrsigner_backend"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_backend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_get_"
        "public_key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_get_public_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_get_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_sign_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_sign_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_sign_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_"
        "encrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_nip04_encrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_encrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_"
        "decrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_nip04_decrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_decrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_"
        "encrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_nip44_encrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_encrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_"
        "decrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customnostrsigner_nip44_decrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_decrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_"
        "support_ping"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customwebsockettransport_support_ping"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_support_ping(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_"
        "connect"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "customwebsockettransport_connect"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_connect(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_"
        "decrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "encryptedsecretkey_decrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_decrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_key_"
        "security"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "encryptedsecretkey_key_security"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_key_security(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_to_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "encryptedsecretkey_to_bech32"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_to_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_"
        "version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "encryptedsecretkey_version"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_as_json(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_author"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_author(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_content"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_content(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_created_at"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_created_at"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_created_at(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_is_expired"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_is_expired"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_is_expired(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_is_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_is_protected"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_is_protected(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_signature"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_tags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_verify"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_verify"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_verify_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_verify_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_event_verify_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_event_verify_signature"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_allow_self_"
        "tagging"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "eventbuilder_allow_self_tagging"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_allow_self_tagging(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_custom_created_"
        "at"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "eventbuilder_custom_created_at"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_custom_created_at(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_dedup_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_eventbuilder_dedup_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_dedup_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign_with_"
        "keys"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "eventbuilder_sign_with_keys"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign_with_keys(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_contains"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_contains"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_contains(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_first"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_first"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_first(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_is_empty"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_is_empty(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_len"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_merge"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_merge"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_merge(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_to_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_events_to_vec"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_events_to_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_aes_256_gcm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filemetadata_aes_256_gcm"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_aes_256_gcm(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_blurhash"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filemetadata_blurhash"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_blurhash(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_dimensions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filemetadata_dimensions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_dimensions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_as_record"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_as_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_author"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_author(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_authors"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_authors"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_authors(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_event(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_events"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_events(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_identifier"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_identifier(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_ids"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_ids(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_kinds"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_kinds"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_kinds(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_limit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_limit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_limit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_match_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_match_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_match_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_reference"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_reference"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_reference(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_references"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_references"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_references(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_authors"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_authors"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_authors(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_coordinates"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_coordinates(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_custom_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_custom_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_custom_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_hashtags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_hashtags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_identifiers"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_identifiers"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_identifiers(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_pubkeys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_pubkeys"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_pubkeys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_references"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_filter_remove_references"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_references(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_search"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_search"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_search(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_since"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_since"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_since(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_until"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_filter_until"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_until(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_"
        "msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "handlenotification_handle_msg"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_handlenotification_handle"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_amount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_jobfeedbackdata_amount"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_amount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_extra_"
        "info"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "jobfeedbackdata_extra_info"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_extra_info(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_payload"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_jobfeedbackdata_payload"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_payload(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_public_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_as_std"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_as_std"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_as_std(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_pretty_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_metadata_as_pretty_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_pretty_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_custom_field"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_metadata_get_custom_field"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_custom_field(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_metadata_get_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_custom_field"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_metadata_set_custom_field"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_custom_field(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_display_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_metadata_set_display_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_display_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nwc_list_transactions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_status"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nwc_status"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_status(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip05profile_public_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_"
        "coordinate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nip19coordinate_coordinate"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_coordinate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19coordinate_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19coordinate_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_nostr_"
        "uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nip19coordinate_to_nostr_uri"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_author"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_author(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19event_to_nostr_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19profile_public_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19profile_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nip19profile_to_nostr_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_bunker_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrconnect_bunker_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_bunker_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_get_public_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnect_get_public_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_get_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_"
        "decrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnect_nip04_decrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_decrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_"
        "encrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnect_nip04_encrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_encrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_"
        "decrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnect_nip44_decrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_decrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_"
        "encrypt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnect_nip44_encrypt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_encrypt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_sign_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrconnect_sign_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_sign_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_as_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnectmetadata_as_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_as_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnectmetadata_description"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_"
        "icons"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrconnectmetadata_icons"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_icons(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrconnectmetadata_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_url(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrdatabase_event_by_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrdatabase_metadata"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrdatabase_save_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_get_public_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrsigner_get_public_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_get_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrsigner_nip04_decrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrsigner_nip04_encrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrsigner_nip44_decrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrsigner_nip44_encrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_nostrsigner_sign_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_"
        "connection_mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                "nostrwalletconnectoptions_connection_mode"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrwalletconnectoptions_timeout"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_"
        "lud16"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrwalletconnecturi_lud16"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_lud16(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_"
        "public_key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrwalletconnecturi_public_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_public_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_"
        "relays"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrwalletconnecturi_relays"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_relays(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_"
        "secret"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "nostrwalletconnecturi_secret"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_secret(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_automatic_"
        "authentication"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "options_automatic_authentication"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_connection"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_connection"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_connection(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_gossip"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_gossip"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_gossip(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_options_max_avg_latency"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_nostr_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_publickey_to_nostr_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_nostr_uri(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_connect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_connect(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_relay_connection_mode"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_count_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_count_events"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_count_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_document"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_document"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_document(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_opts"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_opts(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_queue"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_queue"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_queue(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_send_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_send_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_send_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_stats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_stats"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_stats(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_status"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_status"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_status(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_relay_subscribe_with_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscription"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscription"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscription(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_sync"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_sync"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_sync(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_sync_with_items"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_relay_sync_with_items"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_sync_with_items(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_relay_unsubscribe_all"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relay_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
        "attempts"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_attempts"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_"
        "received"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_bytes_received"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_"
        "sent"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_bytes_sent"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
        "connected_at"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_connected_at"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_"
        "connection_timestamp"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
              "first_connection_timestamp"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
        "latency"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_latency"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
        "success"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_success"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_"
        "success_rate"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayconnectionstats_success_rate"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success_rate(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "contact"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_contact"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_contact(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "description"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_description"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_description(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "fees"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_fees"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_fees(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "icon"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_icon"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_icon(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "language_tags"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_language_tags"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_language_tags(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "limitation"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_limitation"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_limitation(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "name"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_name"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_name(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "payments_url"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_payments_url"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_payments_url(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "posting_policy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_posting_policy"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_posting_policy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "pubkey"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_pubkey"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_pubkey(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "relay_countries"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_relay_countries"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_relay_countries(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "retention"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_retention"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_retention(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "software"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_software"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_software(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "supported_nips"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_supported_nips"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_supported_nips(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "tags"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_tags"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_tags(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_"
        "version"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayinformationdocument_version"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_version(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_"
        "tags"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relaylimits_event_max_num_tags"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_"
        "tags_per_kind"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relaylimits_event_max_num_tags_per_kind"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_"
        "size"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relaylimits_event_max_size"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_"
        "per_kind"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relaylimits_event_max_size_per_kind"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_"
        "size"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relaylimits_message_max_size"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_"
        "interval"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayoptions_adjust_retry_interval"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_interval(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_"
        "mode"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayoptions_connection_mode"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_"
        "latency"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayoptions_max_avg_latency"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_relayoptions_reconnect"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_"
        "interval"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "relayoptions_retry_interval"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_interval(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_request_method"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_request_method"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_request_method(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_request_params"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_request_params"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_request_params(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_get_shipping_"
        "cost"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "shippingmethod_get_shipping_cost"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_get_shipping_cost(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_regions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_shippingmethod_regions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_regions(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_"
        "lowercase"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "singlelettertag_is_lowercase"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_lowercase(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_"
        "uppercase"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "singlelettertag_is_uppercase"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_uppercase(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_description"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_stalldata_description"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_description(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_id(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_name"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_name"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_name(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_"
        "exit_policy"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "subscribeautocloseoptions_exit_policy"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_exit_policy(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_"
        "idle_timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "subscribeautocloseoptions_idle_timeout"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_idle_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "subscribeautocloseoptions_timeout"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_subscribeoptions_close_on"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_direction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_syncoptions_direction"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_direction(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_initial_"
        "timeout"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "syncoptions_initial_timeout"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_initial_timeout(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_content"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_content(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_root"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_is_root"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_root(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_kind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_len"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tag_single_letter_tag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_tag_single_letter_tag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_single_letter_tag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_expiration"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_expiration"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_expiration(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_filter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_filter"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_filter(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_filter_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_tags_filter_standardized"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_filter_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_find"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_find"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_find(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_find_standardized"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_tags_find_standardized"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_find_standardized(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_first"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_first"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_first(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_get"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_get"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_get(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_identifier"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_identifier(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_last"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_last"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_last(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_len"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_len"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_len(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_timestamp_to_human_"
        "datetime"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "timestamp_to_human_datetime"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_timestamp_to_human_datetime(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_add_"
        "signature"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "unsignedevent_add_signature"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_add_signature(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_unsignedevent_as_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_pretty_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "unsignedevent_as_pretty_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_pretty_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_content"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_unsignedevent_content"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_content(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_created_at"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_unsignedevent_created_at"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_created_at(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign_with_"
        "keys"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "unsignedevent_sign_with_keys"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign_with_keys(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_send"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_websocketadapter_send"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_send(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_recv"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_websocketadapter_recv"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_recv(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_close_"
        "connection"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_method_"
                                    "websocketadapter_close_connection"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_close_connection(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_amount"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_zaprequestdata_amount"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_amount(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_event_id"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_zaprequestdata_event_id"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_event_id(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_message"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "method_zaprequestdata_message"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_message(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_client_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_client_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_client_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientmessage_auth"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_close"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientmessage_close"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_close(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientmessage_count"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientmessage_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_"
        "enum"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_clientmessage_from_enum"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_enum(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_clientmessage_from_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_req"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_clientmessage_req"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_req(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_connection_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_connection_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_connection_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_coordinate_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_"
        "from_bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_encryptedsecretkey_from_bech32"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_encryptedsecretkey_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_articles_"
        "curation_set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
              "articles_curation_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_articles_curation_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_auth"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_award_"
        "badge"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_award_badge"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_award_badge(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_blocked_"
        "relays"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_blocked_relays"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_blocked_relays(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
        "bookmarks"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_bookmarks"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_bookmarks_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_channel"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_"
        "metadata"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_channel_metadata"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_metadata(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_"
        "msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_channel_msg"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_comment"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_comment"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_comment(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
        "communities"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_communities"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_communities(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_contact_"
        "list"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_contact_list"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_contact_list(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_define_"
        "badge"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_define_badge"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_define_badge(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_delete"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_delete"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_delete(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emoji_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_emoji_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emoji_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emojis"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_emojis"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emojis(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_file_"
        "metadata"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_file_metadata"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_file_metadata(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_follow_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_follow_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_follow_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_"
        "issue"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_git_issue"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_issue(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_"
        "patch"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_git_patch"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_patch(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_"
        "repository_announcement"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(
          rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_"
              "repository_announcement"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_repository_announcement(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_hide_"
        "channel_msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_hide_channel_msg"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_hide_channel_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_http_"
        "auth"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_http_auth"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_http_auth(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interest_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_interest_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interest_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
        "interests"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_interests"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interests(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_"
        "feedback"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_job_feedback"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_feedback(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_"
        "request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_job_request"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_"
        "result"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_job_result"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_result(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_label"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_label"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_label(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_live_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_"
        "event_msg"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_live_event_msg"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event_msg(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_long_form_"
        "text_note"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_long_form_text_note"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_long_form_text_note(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
        "metadata"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_metadata"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_metadata(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_"
        "channel_user"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_mute_channel_user"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_channel_user(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_"
        "list"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_mute_list"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_list(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_nostr_"
        "connect"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_nostr_connect"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_nostr_connect(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_pinned_"
        "notes"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_pinned_notes"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_pinned_notes(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_private_"
        "msg_rumor"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_private_msg_rumor"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_private_msg_rumor(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_product_"
        "data"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_product_data"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_product_data(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_profile_"
        "badges"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_profile_badges"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_profile_badges(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_"
        "chats"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_public_chats"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_chats(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_"
        "zap_request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_public_zap_request"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_zap_request(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_"
        "reaction"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_reaction"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction_"
        "extended"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_reaction_extended"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction_extended(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_"
        "list"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_relay_list"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_list(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_"
        "set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_relay_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_report"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_report"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_report(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_repost"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_repost"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_repost(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_seal"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventbuilder_seal"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_seal(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_search_"
        "relays"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_search_relays"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_search_relays(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_stall_"
        "data"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_stall_data"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_stall_data(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_"
        "note"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_text_note"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note_"
        "reply"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_text_note_reply"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note_reply(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_videos_"
        "curation_set"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_eventbuilder_videos_curation_set"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_videos_curation_set(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_zap_"
        "receipt"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_eventbuilder_zap_receipt"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_zap_receipt(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_eventid_from_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_filemetadata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_filemetadata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filemetadata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_filter_from_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_filter_from_record"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_filter_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_filter_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_jobfeedbackdata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_jobfeedbackdata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_jobfeedbackdata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_from_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_keys_from_mnemonic"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_from_mnemonic(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_kind_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_kind_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_kind_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_metadata_from_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_record"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_metadata_from_record"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_record(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19_from_bech32"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nip19_from_bech32"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19_from_bech32(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19coordinate_from_bech32"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_"
        "nostr_uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_nip19coordinate_from_nostr_uri"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nip19coordinate_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19event_from_bech32"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_"
        "event"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19event_from_event"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_event(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_nostr_"
        "uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19event_from_nostr_uri"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_"
        "bech32"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19profile_from_bech32"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_bech32(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_"
        "nostr_uri"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nip19profile_from_nostr_uri"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_nostr_uri(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nip19profile_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnect_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nostrconnect_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnect_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectmetadata_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nostrconnectmetadata_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectmetadata_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnecturi_"
        "parse"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nostrconnecturi_parse"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnecturi_parse(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nostrdatabase_lmdb"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_custom"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nostrsigner_custom"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_custom(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_nostrsigner_keys"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nostr_"
        "connect"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nostrsigner_nostr_connect"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nostr_connect(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_"
        "nostrwalletconnectoptions_new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_nostrwalletconnectoptions_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_"
        "new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nostrwalletconnecturi_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_"
        "parse"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_nostrwalletconnecturi_parse"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_parse(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_options_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_options_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_options_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_publickey_from_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_"
        "relayinformationdocument_new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_relayinformationdocument_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relayinformationdocument_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaylimits_disable"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_auth"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_auth"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_auth(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_closed"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_closed"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_closed(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_count"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_count"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_count(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_eose"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_eose"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_eose(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_"
        "enum"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_relaymessage_from_enum"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_enum(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_relaymessage_from_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_notice"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relaymessage_notice"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_notice(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_relayoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_request_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_request_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_request_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_request_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_request_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_request_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_secretkey_from_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_secretkey_generate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_generate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_shippingmethod_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_shippingmethod_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_shippingmethod_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_"
        "lowercase"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_singlelettertag_lowercase"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_lowercase(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_"
        "uppercase"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_singlelettertag_uppercase"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_uppercase(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_json"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_stalldata_from_json"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_json(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_"
        "record"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_stalldata_from_record"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_record(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_"
        "subscribeautocloseoptions_new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                "constructor_subscribeautocloseoptions_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_subscribeoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_client"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_description"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_description"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_description(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event_report"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_tag_event_report"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event_report(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_from_"
        "standardized"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_tag_from_standardized"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_from_standardized(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_image"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_image"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_image(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key_"
        "report"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_tag_public_key_report"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key_report(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_relay_metadata"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_tag_relay_metadata"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_relay_metadata(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_title"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tag_title"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_title(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_from_secs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_timestamp_from_secs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_from_secs(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_unsignedevent_from_"
        "json"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_unsignedevent_from_json"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_unsignedevent_from_json(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_unwrappedgift_from_"
        "gift_wrap"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_unwrappedgift_from_gift_wrap"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_unwrappedgift_from_gift_wrap(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_"
        "websocketadapterwrapper_new"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                    "constructor_websocketadapterwrapper_new"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_websocketadapterwrapper_new(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_checksum_constructor_zaprequestdata_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_checksum_"
                                        "constructor_zaprequestdata_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_checksum_constructor_zaprequestdata_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_ffi_nostr_sdk_ffi_uniffi_contract_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_ffi_nostr_sdk_ffi_uniffi_contract_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_nostr_sdk_ffi_uniffi_contract_version(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrsigner"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_init_"
                                        "callback_vtable_customnostrsigner"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrsigner(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_"
        "customwebsockettransport"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_init_"
                                    "callback_vtable_customwebsockettransport"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customwebsockettransport(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_"
        "handlenotification"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_init_"
                                    "callback_vtable_handlenotification"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_websocketadapter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_nostr_sdk_ffi_fn_init_"
                                        "callback_vtable_websocketadapter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_websocketadapter(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_admitpolicy_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_admitpolicy_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_admitpolicy_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_client_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_client_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_client_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "clientbuilder_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_clientmessage_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "clientmessage_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_clientmessage_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_connection_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_connection_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_connection_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_coordinate_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_coordinate_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_coordinate_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_customnostrsigner_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "customnostrsigner_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_customnostrsigner_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_customwebsockettransport_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "customwebsockettransport_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_customwebsockettransport_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_encryptedsecretkey_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "encryptedsecretkey_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_encryptedsecretkey_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_event_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_event_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_event_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_eventbuilder_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_eventbuilder_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_eventbuilder_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_eventid_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_eventid_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_eventid_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_events_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_events_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_events_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_filemetadata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_filemetadata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_filemetadata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_filter_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_filter_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_filter_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_handlenotification_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "handlenotification_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_handlenotification_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_jobfeedbackdata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "jobfeedbackdata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_jobfeedbackdata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_keys_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_keys_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_keys_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_kind_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_kind_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_kind_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_metadata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_metadata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_metadata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nwc_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_nwc_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_nwc_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip05profile_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_nip05profile_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nip05profile_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip19_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_nip19_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_nip19_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip19coordinate_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "nip19coordinate_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nip19coordinate_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip19event_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_nip19event_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nip19event_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip19profile_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_nip19profile_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nip19profile_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nip21_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_nip21_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_nip21_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nostrconnect_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_nostrconnect_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nostrconnect_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nostrconnectmetadata_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "nostrconnectmetadata_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_nostrconnectmetadata_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_nostrconnecturi_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "nostrconnecturi_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nostrconnecturi_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nostrdatabase_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "nostrdatabase_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nostrdatabase_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nostrsigner_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_nostrsigner_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_nostrsigner_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_nostrwalletconnectoptions_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "nostrwalletconnectoptions_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_nostrwalletconnectoptions_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_nostrwalletconnecturi_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "nostrwalletconnecturi_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_nostrwalletconnecturi_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_options_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_options_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_options_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_publickey_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_publickey_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_publickey_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_relay_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_relay_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_relay_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_relayconnectionstats_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "relayconnectionstats_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_relayconnectionstats_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_relayinformationdocument_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "relayinformationdocument_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_relayinformationdocument_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_relaylimits_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_relaylimits_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_relaylimits_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_relaymessage_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_relaymessage_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_relaymessage_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_relayoptions_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_relayoptions_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_relayoptions_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_request_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_request_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_request_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_response_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_response_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_response_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_secretkey_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_secretkey_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_secretkey_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_serverconfig_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_serverconfig_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_serverconfig_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_shippingmethod_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "shippingmethod_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_shippingmethod_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_singlelettertag_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "singlelettertag_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_singlelettertag_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_stalldata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_stalldata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_stalldata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_subscribeautocloseoptions_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "subscribeautocloseoptions_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_subscribeautocloseoptions_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_subscribeoptions_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "subscribeoptions_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_subscribeoptions_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_syncoptions_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_syncoptions_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_syncoptions_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_tag_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_tag_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_tag_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_tags_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_tags_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_tags_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_timestamp_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_timestamp_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_timestamp_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_unsignedevent_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "unsignedevent_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_unsignedevent_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_unwrappedgift_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "unwrappedgift_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_unwrappedgift_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_websocketadapter_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "websocketadapter_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_websocketadapter_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_websocketadapterwrapper_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "ubrn_uniffi_internal_fn_method_"
                                "websocketadapterwrapper_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_websocketadapterwrapper_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_zaprequestdata_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "zaprequestdata_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_zaprequestdata_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
}

void NativeNostrSdk::registerModule(
    jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> callInvoker) {
  auto invoker =
      std::make_shared<uniffi_runtime::UniffiCallInvoker>(callInvoker);
  auto tm = std::make_shared<NativeNostrSdk>(rt, invoker);
  auto obj = rt.global().createFromHostObject(rt, tm);
  rt.global().setProperty(rt, "NativeNostrSdk", obj);
}

void NativeNostrSdk::unregisterModule(jsi::Runtime &rt) {
  uniffi::nostr_sdk::registry::clearRegistry();
}

jsi::Value NativeNostrSdk::get(jsi::Runtime &rt, const jsi::PropNameID &name) {
  try {
    return jsi::Value(rt, props.at(name.utf8(rt)));
  } catch (std::out_of_range &e) {
    return jsi::Value::undefined();
  }
}

std::vector<jsi::PropNameID>
NativeNostrSdk::getPropertyNames(jsi::Runtime &rt) {
  std::vector<jsi::PropNameID> rval;
  for (auto &[key, value] : props) {
    rval.push_back(jsi::PropNameID::forUtf8(rt, key));
  }
  return rval;
}

void NativeNostrSdk::set(jsi::Runtime &rt, const jsi::PropNameID &name,
                         const jsi::Value &value) {
  props.insert_or_assign(name.utf8(rt), &value);
}

NativeNostrSdk::~NativeNostrSdk() {
  // Cleanup for callback function RustFutureContinuationCallback
  uniffi::nostr_sdk::cb::rustfuturecontinuationcallback::cleanup();
  // Cleanup for "free" callback function CallbackInterfaceFree
  uniffi::nostr_sdk::st::foreignfuture::foreignfuture::free::cleanup();
  uniffi::nostr_sdk::st::vtablecallbackinterfaceadmitpolicy::
      vtablecallbackinterfaceadmitpolicy::free::cleanup();
  uniffi::nostr_sdk::st::vtablecallbackinterfacecustomnostrsigner::
      vtablecallbackinterfacecustomnostrsigner::free::cleanup();
  uniffi::nostr_sdk::st::vtablecallbackinterfacecustomwebsockettransport::
      vtablecallbackinterfacecustomwebsockettransport::free::cleanup();
  uniffi::nostr_sdk::st::vtablecallbackinterfacehandlenotification::
      vtablecallbackinterfacehandlenotification::free::cleanup();
  uniffi::nostr_sdk::st::vtablecallbackinterfacewebsocketadapter::
      vtablecallbackinterfacewebsocketadapter::free::cleanup();
  // Cleanup for callback function CallbackInterfaceAdmitPolicyMethod0
  uniffi::nostr_sdk::cb::callbackinterfaceadmitpolicymethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod0
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod1
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod1::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod2
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod2::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod3
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod3::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod4
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod4::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod5
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod5::cleanup();
  // Cleanup for callback function CallbackInterfaceCustomNostrSignerMethod6
  uniffi::nostr_sdk::cb::callbackinterfacecustomnostrsignermethod6::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceCustomWebSocketTransportMethod0
  uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod0::
      cleanup();
  // Cleanup for callback function
  // CallbackInterfaceCustomWebSocketTransportMethod1
  uniffi::nostr_sdk::cb::callbackinterfacecustomwebsockettransportmethod1::
      cleanup();
  // Cleanup for callback function CallbackInterfaceHandleNotificationMethod0
  uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceHandleNotificationMethod1
  uniffi::nostr_sdk::cb::callbackinterfacehandlenotificationmethod1::cleanup();
  // Cleanup for callback function CallbackInterfaceWebSocketAdapterMethod0
  uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceWebSocketAdapterMethod1
  uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod1::cleanup();
  // Cleanup for callback function CallbackInterfaceWebSocketAdapterMethod2
  uniffi::nostr_sdk::cb::callbackinterfacewebsocketadaptermethod2::cleanup();
}

// Utility functions for serialization/deserialization of strings.
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_bytelength(rt, args[0]);
}

jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_arraybuffer(rt, args[0]);
}

jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::arraybuffer_to_string(rt, args[0]);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_admitpolicy_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_admitpolicy(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_client_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_client(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_clientbuilder_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_clientbuilder(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_clientmessage_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_clientmessage(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_connection_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_connection(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_coordinate_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_coordinate(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_customnostrsigner_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_customnostrsigner(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_customwebsockettransport_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_encryptedsecretkey_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_event_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_event(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_eventbuilder_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_eventbuilder(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_eventid_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_eventid(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_events_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_events(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_filemetadata_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_filemetadata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_filter_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_filter(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_handlenotification_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_handlenotification(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_jobfeedbackdata_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_keys_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_keys(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_kind_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_kind(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_metadata_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_metadata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::cpp_uniffi_internal_fn_method_nwc_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nwc(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nip05profile_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip05profile(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nip19_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip19(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_nip19coordinate_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip19coordinate(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nip19event_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip19event(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nip19profile_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip19profile(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nip21_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nip21(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nostrconnect_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrconnect(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_nostrconnectmetadata_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_nostrconnecturi_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nostrdatabase_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_nostrsigner_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrsigner(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_nostrwalletconnectoptions_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_nostrwalletconnecturi_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_options_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_options(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_publickey_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_publickey(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_relay_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relay(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_relayconnectionstats_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_relayinformationdocument_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_relaylimits_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relaylimits(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_relaymessage_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relaymessage(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_relayoptions_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_relayoptions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_request_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_request(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_response_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_response(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_secretkey_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_secretkey(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_serverconfig_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_serverconfig(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_shippingmethod_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_shippingmethod(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_singlelettertag_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_singlelettertag(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_stalldata_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_stalldata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_subscribeautocloseoptions_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_subscribeoptions_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_subscribeoptions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_syncoptions_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_syncoptions(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::cpp_uniffi_internal_fn_method_tag_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_tag(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_tags_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_tags(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_timestamp_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_timestamp(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_unsignedevent_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_unsignedevent(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_unwrappedgift_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_unwrappedgift(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_websocketadapter_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_websocketadapter(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_internal_fn_method_websocketadapterwrapper_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_internal_fn_method_zaprequestdata_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_nostr_sdk_ffi_fn_free_zaprequestdata(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}

// Methods calling directly into the uniffi generated C API of the Rust crate.
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_admitpolicy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_admitpolicy(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_admitpolicy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_admitpolicy(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_admitpolicy_admit_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_client_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_client_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_add_discovery_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_add_read_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_add_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_add_write_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_method_client_automatic_authentication(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_database(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_database(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_disconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_disconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_combined_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_fetch_combined_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_fetch_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_fetch_events_from(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_fetch_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_all_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_force_remove_all_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_force_remove_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_remove_all_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_shutdown(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_shutdown(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_signer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_signer(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscribe(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscription(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscription(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_subscriptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_subscriptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_sync(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_sync(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_try_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_try_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_unwrap_gift_wrap(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_client_wait_for_connection(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_clientbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_clientbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_clientbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_clientbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_admit_policy(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_clientbuilder_websocket_transport(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientbuilder_websocket_transport(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_clientmessage(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_clientmessage(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_clientmessage(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_clientmessage(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_auth(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_close(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_count(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_enum(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_clientmessage_req(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_enum(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientmessage_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_clientmessage_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_connection(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_connection(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_connection(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_connection(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_connection_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_connection_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_connection_addr(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_addr(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_connection_mode(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_mode(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_connection_target(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_target(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_connection_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_coordinate_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_coordinate_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_identifier(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_verify(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_verify(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_display(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_coordinate_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_customnostrsigner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_customnostrsigner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_customnostrsigner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_backend(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_get_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_get_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_sign_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_sign_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip04_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customnostrsigner_nip44_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_customwebsockettransport(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_customwebsockettransport(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_support_ping(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_support_ping(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_customwebsockettransport_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_encryptedsecretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_encryptedsecretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_from_bech32(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_encryptedsecretkey_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_key_security(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_key_security(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_version(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_encryptedsecretkey_uniffi_trait_hash(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_event_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_event_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_as_pretty_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_author(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_created_at(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_created_at(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_is_expired(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_is_expired(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_is_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_is_protected(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_verify(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_verify_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_verify_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_verify_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_event_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_eventbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_eventbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_eventbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_eventbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_articles_curation_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_articles_curation_set(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_auth(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_award_badge(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_award_badge(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_blocked_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_blocked_relays(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_bookmarks_set(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_metadata(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_channel_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_comment(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_communities(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_communities(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_contact_list(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_contact_list(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_define_badge(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_define_badge(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[5]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_delete(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emoji_set(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emoji_set(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_emojis(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_file_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_file_metadata(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_follow_set(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_follow_set(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_issue(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_issue(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_patch(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_patch(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_repository_announcement(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_git_repository_announcement(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_hide_channel_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_hide_channel_msg(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_http_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_http_auth(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interest_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interest_set(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interests(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_interests(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_feedback(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_feedback(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_result(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_job_result(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_label(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_live_event_msg(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_long_form_text_note(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_long_form_text_note(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_channel_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_channel_user(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_mute_list(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_nostr_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_nostr_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_pinned_notes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_pinned_notes(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_private_msg_rumor(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_private_msg_rumor(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_product_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_product_data(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_profile_badges(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_profile_badges(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_chats(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_chats(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_zap_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_public_zap_request(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction_extended(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_reaction_extended(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[3]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_list(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_set(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_relay_set(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_report(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_repost(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_seal(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_search_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_search_relays(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_stall_data(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_stall_data(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note_reply(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_text_note_reply(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_videos_curation_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_videos_curation_set(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_zap_receipt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventbuilder_zap_receipt(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_allow_self_tagging(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_allow_self_tagging(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_build(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_custom_created_at(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_custom_created_at(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_dedup_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_pow(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign_with_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_sign_with_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventbuilder_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_eventid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_eventid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_eventid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_eventid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventid_from_bytes(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventid_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_eventid_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_as_bytes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_to_hex(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_eventid_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_contains(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_contains(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_first(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_first(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_is_empty(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_len(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_merge(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_merge(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_events_to_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_events_to_vec(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_filemetadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_filemetadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_filemetadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_filemetadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_filemetadata_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_aes_256_gcm(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_blurhash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_dimensions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_magnet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_size(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_size(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filemetadata_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_filter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_filter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_filter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_filter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_filter_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_filter_from_record(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_filter_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_filter_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_as_record(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_author(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_authors(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_authors(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_coordinates(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_coordinates(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_custom_tag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_custom_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_hashtag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_hashtag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_hashtags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_identifier(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_identifiers(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_identifiers(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_ids(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_is_empty(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_kinds(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_kinds(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_limit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_limit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_match_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_match_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_pubkeys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_reference(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_reference(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_references(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_references(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_authors(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_coordinates(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_custom_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_hashtags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_identifiers(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_ids(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_kinds(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_limit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_pubkeys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_references(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_references(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_search(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_search(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_since(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_since(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_remove_until(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_remove_until(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_search(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_search(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_since(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_since(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_until(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_until(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_filter_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_handlenotification(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_handlenotification(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_handlenotification(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_handlenotification(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_handlenotification_handle(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_jobfeedbackdata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_jobfeedbackdata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_jobfeedbackdata_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_amount(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_extra_info(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_jobfeedbackdata_payload(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_keys_from_mnemonic(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_generate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_keys_generate(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_keys_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_keys_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_keys_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_secret_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_secret_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_sign_schnorr(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_keys_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_kind_from_std(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_kind_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_kind_new(
      uniffi_jsi::Bridging<uint16_t>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_as_std(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_as_std(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_as_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_as_u16(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_addressable(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_ephemeral(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_job_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_job_result(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_regular(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_regular(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_is_replaceable(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_kind_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_metadata_from_record(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_metadata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_metadata_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_as_pretty_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_as_record(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_about(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_about(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_banner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_custom_field(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud06(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_lud16(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_nip05(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_picture(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_get_website(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_get_website(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_about(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_about(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_banner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_custom_field(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_display_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud06(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_lud16(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_nip05(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_picture(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_set_website(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_set_website(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_metadata_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nwc(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nwc(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nwc(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nwc(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nwc_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nwc_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_get_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_get_info(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nwc_status(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nwc_status(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip05profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip05profile(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip05profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip05profile(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip05profile_nip46(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip05profile_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip05profile_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip19(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip19(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip19(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19_from_bech32(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19_as_enum(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip19coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip19coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip19coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_bech32(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_from_nostr_uri(
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19coordinate_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19coordinate_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip19event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip19event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip19event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_bech32(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19event_from_nostr_uri(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19event_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_author(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_event_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19event_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip19profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip19profile(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip19profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip19profile(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_bech32(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_from_nostr_uri(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip19profile_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip19profile_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nip21(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nip21(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nip21(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nip21(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nip21_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip21_as_enum(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip21_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nip21_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrconnect_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_bunker_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_get_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_get_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip04_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_nip44_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnect_sign_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrconnectmetadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrconnectmetadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectmetadata_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrconnectmetadata_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_description(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_icons(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnectmetadata_uniffi_trait_hash(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrconnecturi(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrconnecturi(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrconnecturi_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_display(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_display(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrconnecturi_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_lmdb(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_metadata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrsigner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrsigner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrsigner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrsigner(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_custom(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nostr_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nostr_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_backend(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_get_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new(
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_connection_mode(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnecturi(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnecturi(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_parse(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnecturi_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_lud16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_lud16(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_relays(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_secret(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_secret(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnecturi_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_options(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_options(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_options(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_options(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_options_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_options_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_options_autoconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_autoconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_automatic_authentication(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_options_connection(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_connection(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_options_gossip(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_gossip(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_max_avg_latency(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_options_relay_limits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_options_relay_limits(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_publickey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_publickey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_publickey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_publickey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_publickey_from_bytes(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_publickey_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_to_hex(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_to_nostr_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_publickey_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relay(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_method_relay_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_connection_mode(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_count_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_count_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_disconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_method_relay_disconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_document(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_document(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_fetch_events(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_opts(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_queue(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_queue(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_send_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_send_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_stats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_stats(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_status(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_status(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscription(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_subscription(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_sync(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_sync(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_sync_with_items(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_try_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_try_connect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relay_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relay_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success_rate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success_rate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<double>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relayinformationdocument(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relayinformationdocument(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_relayinformationdocument_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_relayinformationdocument_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_contact(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_contact(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_description(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_fees(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_fees(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_icon(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_icon(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_language_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_language_tags(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_limitation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_limitation(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_payments_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_payments_url(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_posting_policy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_posting_policy(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_pubkey(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_relay_countries(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_relay_countries(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_retention(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_retention(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_software(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_software(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_supported_nips(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_supported_nips(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_version(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayinformationdocument_uniffi_trait_hash(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relaylimits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relaylimits(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relaylimits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relaylimits(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags_per_kind(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size_per_kind(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relaymessage(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relaymessage(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relaymessage(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relaymessage(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_auth(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_closed(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_count(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<double>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_eose(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_event(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_enum(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_notice(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relaymessage_ok(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_enum(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relaymessage_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_relayoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_relayoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_relayoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_relayoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_interval(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_interval(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_connection_mode(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_max_avg_latency(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_read(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_read(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_interval(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_interval(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_relayoptions_write(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_relayoptions_write(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_request_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_request_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_request_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_request_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_method(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_method(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_params(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_params(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_request_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_response(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_response(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_response(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_response(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_response_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_secretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_secretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_secretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_secretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_secretkey_from_bytes(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_secretkey_generate(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_secretkey_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_to_bech32(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_to_hex(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_secretkey_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_serverconfig(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_serverconfig(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_serverconfig(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_serverconfig(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_shippingmethod(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_shippingmethod(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_shippingmethod(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_shippingmethod(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_shippingmethod_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<double>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_get_shipping_cost(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_shippingmethod_get_shipping_cost(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_shippingmethod_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_shippingmethod_regions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_singlelettertag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_singlelettertag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_singlelettertag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_singlelettertag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_lowercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_lowercase(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_uppercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_singlelettertag_uppercase(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_lowercase(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_lowercase(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_uppercase(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_singlelettertag_is_uppercase(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_debug(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_eq(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_eq_ne(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_singlelettertag_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_stalldata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_stalldata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_stalldata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_stalldata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_stalldata_from_record(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_stalldata_new(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_as_record(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_currency(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_currency(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_description(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_description(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_name(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_stalldata_shipping(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new(
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_exit_policy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_exit_policy(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_idle_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_idle_timeout(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_subscribeoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_subscribeoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_syncoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_syncoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_syncoptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_syncoptions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_syncoptions_new(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_syncoptions_direction(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_syncoptions_dry_run(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_syncoptions_initial_timeout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_syncoptions_initial_timeout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_tag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_tag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_alt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_alt(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_client(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_coordinate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_custom(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_custom(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_description(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_description(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_event(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_event_report(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_expiration(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_from_standardized(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_hashtag(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_identifier(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_image(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_image(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_pow(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_pow(
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_protected(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_public_key_report(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_reference(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_reference(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_relay_metadata(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tag_title(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tag_title(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_as_standardized(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_as_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_as_vec(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_is_protected(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_reply(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_is_reply(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_is_root(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_is_root(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_kind_str(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_kind_str(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_len(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_single_letter_tag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tag_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tags_from_list(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tags_from_text(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_tags_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_tags_parse(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_coordinates(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_coordinates(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_event_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_event_ids(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_expiration(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_expiration(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_filter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_filter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_filter_standardized(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_find(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_find(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_find_standardized(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_first(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_first(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_get(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_get(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_hashtags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_identifier(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_is_empty(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_last(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_last(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_len(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_public_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_public_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_tags_to_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_tags_to_vec(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_timestamp(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_timestamp(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_timestamp(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_timestamp(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_timestamp_from_secs(
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_timestamp_now(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_as_secs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_to_human_datetime(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_to_human_datetime(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_debug(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_eq(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_ne(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_hash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_timestamp_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_unsignedevent(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_unsignedevent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_unsignedevent(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_unsignedevent(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_unsignedevent_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_unsignedevent_from_json(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_add_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_add_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_pretty_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_as_pretty_json(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_author(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_content(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_created_at(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_kind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign_with_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_sign_with_keys(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_tags(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unsignedevent_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_unwrappedgift(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_unwrappedgift(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_unwrappedgift(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_unwrappedgift_from_gift_wrap(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_unwrappedgift_from_gift_wrap(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift__none(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_rumor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_sender(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_unwrappedgift_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_websocketadapter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_websocketadapter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_websocketadapter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_websocketadapter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_websocketadapter_send(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_websocketadapter_recv(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_websocketadapter_close_connection(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_method_websocketadapter_close_connection(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_websocketadapterwrapper(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_websocketadapterwrapper(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_constructor_websocketadapterwrapper_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_websocketadapterwrapper_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_clone_zaprequestdata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_free_zaprequestdata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_free_zaprequestdata(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_constructor_zaprequestdata_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_amount(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_event_id(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_lnurl(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_message(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_debug(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_debug(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_eq(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_eq(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_ne(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_eq_ne(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_hash(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_method_zaprequestdata_uniffi_trait_hash(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_create_delegation_tag(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_func_decrypt_received_private_zap_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_nostr_sdk_ffi_fn_func_decrypt_received_private_zap_message(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
          &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_func_decrypt_sent_private_zap_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_decrypt_sent_private_zap_message(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_extract_relay_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_extract_relay_list(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_generate_shared_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_generate_shared_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_get_leading_zero_bits(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_get_nip05_profile(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_get_nip96_server_config(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_get_prefixes_for_difficulty(
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_gift_wrap(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_gift_wrap(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_gift_wrap_from_seal(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_git_hash_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_git_hash_version(&status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_init_logger(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_nostr_sdk_ffi_fn_func_init_logger(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_make_private_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_make_private_msg(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[3]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip04_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip04_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip11_get_information_document(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip11_get_information_document(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[1]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip21_extract_from_text(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip44_decrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip44_encrypt(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip57_anonymous_zap_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip57_private_zap_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_nip96_upload(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_nip96_upload(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[4]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_sign_delegation(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_sign_delegation(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_tag_kind_to_string(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_validate_delegation_tag(
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_nostr_sdk_ffi_fn_func_verify_delegation_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_func_verify_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_fn_func_verify_nip05(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::nostr_sdk::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                      args[2]));

  return uniffi_jsi::Bridging</*handle*/ uint64_t>::toJs(rt, callInvoker,
                                                         value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_u8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_u8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_i8(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_i8(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_u16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_i16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_i16(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_u32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_u32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_i32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_i32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_u64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_u64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_i64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_i64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<int64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_f32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_f32(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<float>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_f64(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_f64(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<double>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_pointer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::nostr_sdk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_poll_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_poll_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      uniffi::nostr_sdk::Bridging<UniffiRustFutureContinuationCallback>::fromJs(
          rt, callInvoker, args[1]),
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[2]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_cancel_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_cancel_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_free_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  ffi_nostr_sdk_ffi_rust_future_free_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]));

  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_rust_future_complete_void(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::nostr_sdk::Bridging<RustCallStatus>::rustSuccess(rt);
  ffi_nostr_sdk_ffi_rust_future_complete_void(
      uniffi_jsi::Bridging</*handle*/ uint64_t>::fromJs(rt, callInvoker,
                                                        args[0]),
      &status);
  uniffi::nostr_sdk::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_create_delegation_tag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_decrypt_received_private_zap_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_func_decrypt_received_private_zap_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_decrypt_sent_private_zap_message(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_func_decrypt_sent_private_zap_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_extract_relay_list();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_generate_shared_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_get_leading_zero_bits();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_get_nip05_profile();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_get_nip96_server_config(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_get_nip96_server_config();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_get_prefixes_for_difficulty(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_get_prefixes_for_difficulty();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_gift_wrap();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_gift_wrap_from_seal();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_git_hash_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_git_hash_version();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_init_logger(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_init_logger();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_make_private_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_make_private_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip04_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip04_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_nip11_get_information_document(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_func_nip11_get_information_document();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip21_extract_from_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip21_extract_from_text();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip44_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip44_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_nip57_anonymous_zap_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip57_anonymous_zap_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_nip57_private_zap_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip57_private_zap_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_nip96_upload(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_nip96_upload();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_sign_delegation(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_sign_delegation();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_tag_kind_to_string();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_validate_delegation_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_validate_delegation_tag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_func_verify_delegation_signature(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_verify_delegation_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_func_verify_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_func_verify_nip05();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_admitpolicy_admit_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_admitpolicy_admit_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_add_discovery_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_add_read_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_add_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_add_write_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_automatic_authentication();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_database(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_database();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_disconnect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_combined_events(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_fetch_combined_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events_from(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_fetch_events_from();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_fetch_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_all_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_all_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_relay(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_force_remove_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_remove_all_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_remove_all_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_send_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_shutdown(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_shutdown();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_signer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_signer();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_subscribe();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscription(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_subscription();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_sync(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_sync();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_try_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_try_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_client_unwrap_gift_wrap();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_client_wait_for_connection(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_client_wait_for_connection();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_admit_policy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_admit_policy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_websocket_transport(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_websocket_transport();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_clientmessage_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_addr(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_connection_addr();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_mode(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_connection_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_connection_target(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_connection_target();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_coordinate_identifier();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_coordinate_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_coordinate_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_coordinate_verify();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_backend(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_backend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_get_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_get_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_sign_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_sign_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip04_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customnostrsigner_nip44_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_support_ping(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_support_ping();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_customwebsockettransport_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_key_security(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_key_security();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_to_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_encryptedsecretkey_version();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_as_pretty_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_author();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_created_at(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_created_at();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_is_expired(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_is_expired();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_is_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_is_protected();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_verify();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_verify_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_event_verify_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_event_verify_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_allow_self_tagging(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_allow_self_tagging();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_build();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_custom_created_at(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_custom_created_at();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_dedup_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_dedup_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_pow();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign_with_keys(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_sign_with_keys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventbuilder_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventid_as_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventid_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventid_to_hex();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_eventid_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_contains(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_contains();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_first(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_first();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_is_empty();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_len();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_merge(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_merge();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_events_to_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_events_to_vec();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_aes_256_gcm(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filemetadata_aes_256_gcm();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_blurhash(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filemetadata_blurhash();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_dimensions(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filemetadata_dimensions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filemetadata_magnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filemetadata_size();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_as_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_author();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_authors(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_authors();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_coordinate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_coordinates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_custom_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_hashtag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_hashtags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_identifier();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_identifiers();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_ids();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_is_empty();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_kinds(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_kinds();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_limit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_limit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_match_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_match_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_pubkeys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_reference(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_reference();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_references(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_references();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_authors(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_authors();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_coordinates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_coordinates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_custom_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_custom_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_hashtags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_identifiers(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_identifiers();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_ids();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_kinds();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_limit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_pubkeys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_pubkeys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_references(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_references();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_search();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_since();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_remove_until();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_search(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_search();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_since(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_since();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_filter_until(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_filter_until();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_amount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_amount();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_extra_info(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_extra_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_payload(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_jobfeedbackdata_payload();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_keys_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_keys_secret_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_keys_sign_schnorr();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_as_std(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_as_std();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_as_u16();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_addressable();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_ephemeral();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_job_result();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_regular();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_kind_is_replaceable();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_pretty_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_as_pretty_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_as_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_about();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_banner();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_custom_field(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_custom_field();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud06();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_lud16();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_nip05();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_picture();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_get_website();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_about();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_banner();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_custom_field(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_custom_field();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_display_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_display_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud06();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_lud16();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_nip05();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_picture();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_metadata_set_website();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nwc_status(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nwc_status();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip05profile_nip46();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip05profile_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip05profile_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19_as_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_coordinate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_coordinate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nip19coordinate_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_author();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19event_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19profile_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19profile_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip19profile_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip21_as_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nip21_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_bunker_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_bunker_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_get_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_get_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip04_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_nip44_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_sign_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrconnect_sign_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_as_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_description();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_icons(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_icons();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrconnectmetadata_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_metadata(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_backend();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_get_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_get_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_connection_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_lud16(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_lud16();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_public_key(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_secret(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnecturi_secret();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_options_autoconnect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_options_automatic_authentication();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_options_connection(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_options_connection();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_options_gossip(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_options_gossip();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_options_max_avg_latency();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_publickey_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_publickey_to_hex();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_publickey_to_nostr_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_publickey_to_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_connection_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_count_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_count_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_disconnect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_document(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_document();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_fetch_events();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_opts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_queue(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_queue();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_send_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_send_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_stats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_stats();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_status(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_status();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscription(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_subscription();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_sync(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_sync();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_sync_with_items(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_sync_with_items();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_try_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relay_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relay_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success_rate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success_rate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_contact(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_contact();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_description(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_description();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_fees(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_fees();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_icon(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_icon();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_language_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_language_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_limitation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_limitation();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_name(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_payments_url(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_payments_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_posting_policy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_posting_policy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_pubkey(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_relay_countries(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_relay_countries();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_retention(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_retention();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_software(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_software();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_supported_nips(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_supported_nips();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_version(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayinformationdocument_version();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags_per_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size_per_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relaymessage_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_interval(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_interval();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayoptions_connection_mode();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayoptions_max_avg_latency();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_interval(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_interval();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_request_method(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_request_method();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_request_params(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_request_params();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_secretkey_encrypt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_secretkey_to_hex();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_get_shipping_cost(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_get_shipping_cost();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_regions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_shippingmethod_regions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_lowercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_lowercase();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_uppercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_singlelettertag_is_uppercase();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_as_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_currency();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_description(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_description();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_name(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_name();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_stalldata_shipping();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_exit_policy(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_exit_policy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_idle_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_idle_timeout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_direction(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_syncoptions_direction();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_syncoptions_dry_run();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_syncoptions_initial_timeout(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_syncoptions_initial_timeout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_as_standardized();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_as_vec();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_is_protected();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_is_reply();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_is_root(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_is_root();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_kind_str();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_len();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tag_single_letter_tag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tag_single_letter_tag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_coordinates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_event_ids();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_expiration(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_expiration();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_filter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_filter();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_filter_standardized(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_filter_standardized();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_find(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_find();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_find_standardized(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_find_standardized();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_first(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_first();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_get(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_get();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_hashtags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_identifier();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_is_empty();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_last(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_last();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_len(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_len();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_public_keys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_tags_to_vec();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_timestamp_as_secs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_timestamp_to_human_datetime(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_timestamp_to_human_datetime();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_add_signature(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_add_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_pretty_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_as_pretty_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_author();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_content(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_content();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_created_at(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_created_at();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_kind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign_with_keys(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_sign_with_keys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unsignedevent_tags();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift__none();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_rumor();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_unwrappedgift_sender();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_send(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_send();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_recv(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_recv();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_close_connection(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_method_websocketadapter_close_connection();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_amount(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_amount();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_event_id(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_event_id();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_lnurl();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_message(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_method_zaprequestdata_message();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_client_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_client_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_auth(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_auth();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_close(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_close();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_enum(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_req(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_clientmessage_req();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_connection_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_connection_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_coordinate_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_from_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_encryptedsecretkey_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_event_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_articles_curation_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_articles_curation_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_auth();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_award_badge(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_award_badge();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_blocked_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_blocked_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_bookmarks_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_channel_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_comment(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_comment();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_communities(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_communities();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_contact_list(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_contact_list();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_define_badge(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_define_badge();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_delete(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_delete();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emoji_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emoji_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emojis(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_emojis();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_file_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_file_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_follow_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_follow_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_issue(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_issue();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_patch(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_patch();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_repository_announcement(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_git_repository_announcement();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_hide_channel_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_hide_channel_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_http_auth(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_http_auth();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interest_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interest_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interests(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_interests();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_feedback(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_feedback();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_result(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_job_result();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_label(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_label();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event_msg(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_live_event_msg();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_long_form_text_note(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_long_form_text_note();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_channel_user(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_channel_user();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_list(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_mute_list();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_nostr_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_nostr_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_pinned_notes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_pinned_notes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_private_msg_rumor(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_private_msg_rumor();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_product_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_product_data();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_profile_badges(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_profile_badges();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_chats(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_chats();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_zap_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_public_zap_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction_extended(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_reaction_extended();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_list(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_list();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_relay_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_report(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_report();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_repost(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_repost();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_seal(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_seal();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_search_relays(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_search_relays();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_stall_data(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_stall_data();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note_reply(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_text_note_reply();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_videos_curation_set(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_videos_curation_set();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_zap_receipt(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_eventbuilder_zap_receipt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_from_bytes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventid_from_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventid_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_eventid_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filemetadata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_filemetadata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_json(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_record(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_filter_from_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_filter_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_filter_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_jobfeedbackdata_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_jobfeedbackdata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_from_mnemonic(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_keys_from_mnemonic();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_keys_generate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_keys_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_keys_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_kind_from_std();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_kind_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_kind_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_record(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_metadata_from_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_metadata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19_from_bech32(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nip19_from_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_from_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nip19coordinate_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_from_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nip19event_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_bech32(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_bech32();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_nostr_uri(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_from_nostr_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nip19profile_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nip21_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnect_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnect_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectmetadata_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnectmetadata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnecturi_parse(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrconnecturi_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_lmdb();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_custom(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_custom();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nostr_connect(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nostr_connect();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_parse(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnecturi_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_options_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_options_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_from_bytes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_publickey_from_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_publickey_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relayinformationdocument_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_relayinformationdocument_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_auth(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_auth();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_closed(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_closed();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_count(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_count();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_eose(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_eose();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_event(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_enum(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_enum();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_notice(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_notice();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relaymessage_ok();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_request_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_request_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_request_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_request_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_from_bytes(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_from_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_generate(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_generate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_secretkey_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_shippingmethod_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_shippingmethod_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_lowercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_lowercase();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_uppercase(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_singlelettertag_uppercase();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_record(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_from_record();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_stalldata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_syncoptions_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_alt();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_client();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_coordinate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_custom();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_description(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_description();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_event();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_event_report(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_event_report();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_expiration();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_from_standardized(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_tag_from_standardized();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_hashtag();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_identifier();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_image(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_image();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_pow();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_protected();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key_report(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_tag_public_key_report();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_reference();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_relay_metadata(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_relay_metadata();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tag_title(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tag_title();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_list();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tags_from_text();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_tags_parse();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_from_secs(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_from_secs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_timestamp_now();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_unsignedevent_from_json(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_unsignedevent_from_json();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_unwrappedgift_from_gift_wrap(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_unwrappedgift_from_gift_wrap();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_websocketadapterwrapper_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_nostr_sdk_ffi_checksum_constructor_websocketadapterwrapper_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_checksum_constructor_zaprequestdata_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_nostr_sdk_ffi_checksum_constructor_zaprequestdata_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeNostrSdk::cpp_ffi_nostr_sdk_ffi_uniffi_contract_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = ffi_nostr_sdk_ffi_uniffi_contract_version();

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeNostrSdk::cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto vtableInstance = uniffi::nostr_sdk::Bridging<
      UniffiVTableCallbackInterfaceAdmitPolicy>::fromJs(rt, callInvoker,
                                                        args[0]);

  std::lock_guard<std::mutex> lock(uniffi::nostr_sdk::registry::vtableMutex);
  uniffi_nostr_sdk_ffi_fn_init_callback_vtable_admitpolicy(
      uniffi::nostr_sdk::registry::putTable(
          "UniffiVTableCallbackInterfaceAdmitPolicy", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrsigner(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::nostr_sdk::Bridging<
      UniffiVTableCallbackInterfaceCustomNostrSigner>::fromJs(rt, callInvoker,
                                                              args[0]);

  std::lock_guard<std::mutex> lock(uniffi::nostr_sdk::registry::vtableMutex);
  uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrsigner(
      uniffi::nostr_sdk::registry::putTable(
          "UniffiVTableCallbackInterfaceCustomNostrSigner", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customwebsockettransport(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::nostr_sdk::
      Bridging<UniffiVTableCallbackInterfaceCustomWebSocketTransport>::fromJs(
          rt, callInvoker, args[0]);

  std::lock_guard<std::mutex> lock(uniffi::nostr_sdk::registry::vtableMutex);
  uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customwebsockettransport(
      uniffi::nostr_sdk::registry::putTable(
          "UniffiVTableCallbackInterfaceCustomWebSocketTransport",
          vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::nostr_sdk::Bridging<
      UniffiVTableCallbackInterfaceHandleNotification>::fromJs(rt, callInvoker,
                                                               args[0]);

  std::lock_guard<std::mutex> lock(uniffi::nostr_sdk::registry::vtableMutex);
  uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(
      uniffi::nostr_sdk::registry::putTable(
          "UniffiVTableCallbackInterfaceHandleNotification", vtableInstance));
  return jsi::Value::undefined();
}
jsi::Value NativeNostrSdk::
    cpp_uniffi_nostr_sdk_ffi_fn_init_callback_vtable_websocketadapter(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto vtableInstance = uniffi::nostr_sdk::Bridging<
      UniffiVTableCallbackInterfaceWebSocketAdapter>::fromJs(rt, callInvoker,
                                                             args[0]);

  std::lock_guard<std::mutex> lock(uniffi::nostr_sdk::registry::vtableMutex);
  uniffi_nostr_sdk_ffi_fn_init_callback_vtable_websocketadapter(
      uniffi::nostr_sdk::registry::putTable(
          "UniffiVTableCallbackInterfaceWebSocketAdapter", vtableInstance));
  return jsi::Value::undefined();
}